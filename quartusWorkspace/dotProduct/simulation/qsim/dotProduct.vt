// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/03/2021 00:27:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    dist2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dist2_vlg_sample_tst(
	clk,
	inaImag,
	inaReal,
	inbImag,
	inbReal,
	incImag,
	incReal,
	indImag,
	indReal,
	rst,
	sampler_tx
);
input  clk;
input [15:0] inaImag;
input [15:0] inaReal;
input [15:0] inbImag;
input [15:0] inbReal;
input [15:0] incImag;
input [15:0] incReal;
input [15:0] indImag;
input [15:0] indReal;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or inaImag or inaReal or inbImag or inbReal or incImag or incReal or indImag or indReal or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module dist2_vlg_check_tst (
	outaDist,
	outbDist,
	outcDist,
	outdDist,
	sampler_rx
);
input [15:0] outaDist;
input [15:0] outbDist;
input [15:0] outcDist;
input [15:0] outdDist;
input sampler_rx;

reg [15:0] outaDist_expected;
reg [15:0] outbDist_expected;
reg [15:0] outcDist_expected;
reg [15:0] outdDist_expected;

reg [15:0] outaDist_prev;
reg [15:0] outbDist_prev;
reg [15:0] outcDist_prev;
reg [15:0] outdDist_prev;

reg [15:0] outaDist_expected_prev;

reg [15:0] last_outaDist_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	outaDist_prev = outaDist;
	outbDist_prev = outbDist;
	outcDist_prev = outcDist;
	outdDist_prev = outdDist;
end

// update expected /o prevs

always @(trigger)
begin
	outaDist_expected_prev = outaDist_expected;
end


// expected outaDist[ 15 ]
initial
begin
	outaDist_expected[15] = 1'bX;
end 
// expected outaDist[ 14 ]
initial
begin
	outaDist_expected[14] = 1'bX;
end 
// expected outaDist[ 13 ]
initial
begin
	outaDist_expected[13] = 1'bX;
end 
// expected outaDist[ 12 ]
initial
begin
	outaDist_expected[12] = 1'bX;
end 
// expected outaDist[ 11 ]
initial
begin
	outaDist_expected[11] = 1'bX;
end 
// expected outaDist[ 10 ]
initial
begin
	outaDist_expected[10] = 1'bX;
end 
// expected outaDist[ 9 ]
initial
begin
	outaDist_expected[9] = 1'bX;
end 
// expected outaDist[ 8 ]
initial
begin
	outaDist_expected[8] = 1'bX;
end 
// expected outaDist[ 7 ]
initial
begin
	outaDist_expected[7] = 1'bX;
end 
// expected outaDist[ 6 ]
initial
begin
	outaDist_expected[6] = 1'bX;
end 
// expected outaDist[ 5 ]
initial
begin
	outaDist_expected[5] = 1'bX;
end 
// expected outaDist[ 4 ]
initial
begin
	outaDist_expected[4] = 1'bX;
end 
// expected outaDist[ 3 ]
initial
begin
	outaDist_expected[3] = 1'bX;
end 
// expected outaDist[ 2 ]
initial
begin
	outaDist_expected[2] = 1'bX;
end 
// expected outaDist[ 1 ]
initial
begin
	outaDist_expected[1] = 1'bX;
end 
// expected outaDist[ 0 ]
initial
begin
	outaDist_expected[0] = 1'bX;
end 
// generate trigger
always @(outaDist_expected or outaDist or outbDist_expected or outbDist or outcDist_expected or outcDist or outdDist_expected or outdDist)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outaDist = %b | expected outbDist = %b | expected outcDist = %b | expected outdDist = %b | ",outaDist_expected_prev,outbDist_expected_prev,outcDist_expected_prev,outdDist_expected_prev);
	$display("| real outaDist = %b | real outbDist = %b | real outcDist = %b | real outdDist = %b | ",outaDist_prev,outbDist_prev,outcDist_prev,outdDist_prev);
`endif
	if (
		( outaDist_expected_prev[0] !== 1'bx ) && ( outaDist_prev[0] !== outaDist_expected_prev[0] )
		&& ((outaDist_expected_prev[0] !== last_outaDist_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[0] = outaDist_expected_prev[0];
	end
	if (
		( outaDist_expected_prev[1] !== 1'bx ) && ( outaDist_prev[1] !== outaDist_expected_prev[1] )
		&& ((outaDist_expected_prev[1] !== last_outaDist_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[1] = outaDist_expected_prev[1];
	end
	if (
		( outaDist_expected_prev[2] !== 1'bx ) && ( outaDist_prev[2] !== outaDist_expected_prev[2] )
		&& ((outaDist_expected_prev[2] !== last_outaDist_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[2] = outaDist_expected_prev[2];
	end
	if (
		( outaDist_expected_prev[3] !== 1'bx ) && ( outaDist_prev[3] !== outaDist_expected_prev[3] )
		&& ((outaDist_expected_prev[3] !== last_outaDist_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[3] = outaDist_expected_prev[3];
	end
	if (
		( outaDist_expected_prev[4] !== 1'bx ) && ( outaDist_prev[4] !== outaDist_expected_prev[4] )
		&& ((outaDist_expected_prev[4] !== last_outaDist_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[4] = outaDist_expected_prev[4];
	end
	if (
		( outaDist_expected_prev[5] !== 1'bx ) && ( outaDist_prev[5] !== outaDist_expected_prev[5] )
		&& ((outaDist_expected_prev[5] !== last_outaDist_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[5] = outaDist_expected_prev[5];
	end
	if (
		( outaDist_expected_prev[6] !== 1'bx ) && ( outaDist_prev[6] !== outaDist_expected_prev[6] )
		&& ((outaDist_expected_prev[6] !== last_outaDist_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[6] = outaDist_expected_prev[6];
	end
	if (
		( outaDist_expected_prev[7] !== 1'bx ) && ( outaDist_prev[7] !== outaDist_expected_prev[7] )
		&& ((outaDist_expected_prev[7] !== last_outaDist_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[7] = outaDist_expected_prev[7];
	end
	if (
		( outaDist_expected_prev[8] !== 1'bx ) && ( outaDist_prev[8] !== outaDist_expected_prev[8] )
		&& ((outaDist_expected_prev[8] !== last_outaDist_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[8] = outaDist_expected_prev[8];
	end
	if (
		( outaDist_expected_prev[9] !== 1'bx ) && ( outaDist_prev[9] !== outaDist_expected_prev[9] )
		&& ((outaDist_expected_prev[9] !== last_outaDist_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[9] = outaDist_expected_prev[9];
	end
	if (
		( outaDist_expected_prev[10] !== 1'bx ) && ( outaDist_prev[10] !== outaDist_expected_prev[10] )
		&& ((outaDist_expected_prev[10] !== last_outaDist_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[10] = outaDist_expected_prev[10];
	end
	if (
		( outaDist_expected_prev[11] !== 1'bx ) && ( outaDist_prev[11] !== outaDist_expected_prev[11] )
		&& ((outaDist_expected_prev[11] !== last_outaDist_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[11] = outaDist_expected_prev[11];
	end
	if (
		( outaDist_expected_prev[12] !== 1'bx ) && ( outaDist_prev[12] !== outaDist_expected_prev[12] )
		&& ((outaDist_expected_prev[12] !== last_outaDist_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[12] = outaDist_expected_prev[12];
	end
	if (
		( outaDist_expected_prev[13] !== 1'bx ) && ( outaDist_prev[13] !== outaDist_expected_prev[13] )
		&& ((outaDist_expected_prev[13] !== last_outaDist_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[13] = outaDist_expected_prev[13];
	end
	if (
		( outaDist_expected_prev[14] !== 1'bx ) && ( outaDist_prev[14] !== outaDist_expected_prev[14] )
		&& ((outaDist_expected_prev[14] !== last_outaDist_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[14] = outaDist_expected_prev[14];
	end
	if (
		( outaDist_expected_prev[15] !== 1'bx ) && ( outaDist_prev[15] !== outaDist_expected_prev[15] )
		&& ((outaDist_expected_prev[15] !== last_outaDist_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outaDist[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outaDist_expected_prev);
		$display ("     Real value = %b", outaDist_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outaDist_exp[15] = outaDist_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module dist2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] inaImag;
reg [15:0] inaReal;
reg [15:0] inbImag;
reg [15:0] inbReal;
reg [15:0] incImag;
reg [15:0] incReal;
reg [15:0] indImag;
reg [15:0] indReal;
reg rst;
// wires                                               
wire [15:0] outaDist;
wire [15:0] outbDist;
wire [15:0] outcDist;
wire [15:0] outdDist;

wire sampler;                             

// assign statements (if any)                          
dist2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.inaImag(inaImag),
	.inaReal(inaReal),
	.inbImag(inbImag),
	.inbReal(inbReal),
	.incImag(incImag),
	.incReal(incReal),
	.indImag(indImag),
	.indReal(indReal),
	.outaDist(outaDist),
	.outbDist(outbDist),
	.outcDist(outcDist),
	.outdDist(outdDist),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// inaImag[ 15 ]
initial
begin
	inaImag[15] = 1'b0;
end 
// inaImag[ 14 ]
initial
begin
	inaImag[14] = 1'b0;
end 
// inaImag[ 13 ]
initial
begin
	inaImag[13] = 1'b0;
end 
// inaImag[ 12 ]
initial
begin
	inaImag[12] = 1'b0;
end 
// inaImag[ 11 ]
initial
begin
	inaImag[11] = 1'b0;
end 
// inaImag[ 10 ]
initial
begin
	inaImag[10] = 1'b0;
end 
// inaImag[ 9 ]
initial
begin
	inaImag[9] = 1'b0;
end 
// inaImag[ 8 ]
initial
begin
	inaImag[8] = 1'b0;
end 
// inaImag[ 7 ]
initial
begin
	inaImag[7] = 1'b0;
end 
// inaImag[ 6 ]
initial
begin
	inaImag[6] = 1'b0;
end 
// inaImag[ 5 ]
initial
begin
	inaImag[5] = 1'b0;
end 
// inaImag[ 4 ]
initial
begin
	inaImag[4] = 1'b0;
end 
// inaImag[ 3 ]
initial
begin
	inaImag[3] = 1'b0;
end 
// inaImag[ 2 ]
initial
begin
	inaImag[2] = 1'b0;
	inaImag[2] = #90000 1'b1;
	inaImag[2] = #10000 1'b0;
end 
// inaImag[ 1 ]
initial
begin
	inaImag[1] = 1'b0;
end 
// inaImag[ 0 ]
initial
begin
	inaImag[0] = 1'b0;
	inaImag[0] = #90000 1'b1;
	inaImag[0] = #10000 1'b0;
end 
// inaReal[ 15 ]
initial
begin
	inaReal[15] = 1'b0;
end 
// inaReal[ 14 ]
initial
begin
	inaReal[14] = 1'b0;
end 
// inaReal[ 13 ]
initial
begin
	inaReal[13] = 1'b0;
end 
// inaReal[ 12 ]
initial
begin
	inaReal[12] = 1'b0;
end 
// inaReal[ 11 ]
initial
begin
	inaReal[11] = 1'b0;
end 
// inaReal[ 10 ]
initial
begin
	inaReal[10] = 1'b0;
end 
// inaReal[ 9 ]
initial
begin
	inaReal[9] = 1'b0;
end 
// inaReal[ 8 ]
initial
begin
	inaReal[8] = 1'b0;
end 
// inaReal[ 7 ]
initial
begin
	inaReal[7] = 1'b0;
end 
// inaReal[ 6 ]
initial
begin
	inaReal[6] = 1'b0;
end 
// inaReal[ 5 ]
initial
begin
	inaReal[5] = 1'b0;
end 
// inaReal[ 4 ]
initial
begin
	inaReal[4] = 1'b0;
end 
// inaReal[ 3 ]
initial
begin
	inaReal[3] = 1'b0;
end 
// inaReal[ 2 ]
initial
begin
	inaReal[2] = 1'b0;
	inaReal[2] = #90000 1'b1;
	inaReal[2] = #10000 1'b0;
end 
// inaReal[ 1 ]
initial
begin
	inaReal[1] = 1'b0;
end 
// inaReal[ 0 ]
initial
begin
	inaReal[0] = 1'b0;
	inaReal[0] = #90000 1'b1;
	inaReal[0] = #10000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #30000 1'b1;
	rst = #20000 1'b0;
	rst = #20000 1'b1;
	rst = #280000 1'b0;
end 

dist2_vlg_sample_tst tb_sample (
	.clk(clk),
	.inaImag(inaImag),
	.inaReal(inaReal),
	.inbImag(inbImag),
	.inbReal(inbReal),
	.incImag(incImag),
	.incReal(incReal),
	.indImag(indImag),
	.indReal(indReal),
	.rst(rst),
	.sampler_tx(sampler)
);

dist2_vlg_check_tst tb_out(
	.outaDist(outaDist),
	.outbDist(outbDist),
	.outcDist(outcDist),
	.outdDist(outdDist),
	.sampler_rx(sampler)
);
endmodule

