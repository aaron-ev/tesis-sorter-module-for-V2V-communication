// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/12/2021 01:25:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    m_2to4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module m_2to4_vlg_sample_tst(
	inba,
	sampler_tx
);
input [15:0] inba;
output sampler_tx;

reg sample;
time current_time;
always @(inba)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module m_2to4_vlg_check_tst (
	a1_t,
	a2_t,
	b1_t,
	b2_t,
	c,
	sampler_rx
);
input [3:0] a1_t;
input [3:0] a2_t;
input [3:0] b1_t;
input [3:0] b2_t;
input [15:0] c;
input sampler_rx;

reg [3:0] a1_t_expected;
reg [3:0] a2_t_expected;
reg [3:0] b1_t_expected;
reg [3:0] b2_t_expected;
reg [15:0] c_expected;

reg [3:0] a1_t_prev;
reg [3:0] a2_t_prev;
reg [3:0] b1_t_prev;
reg [3:0] b2_t_prev;
reg [15:0] c_prev;

reg [3:0] a1_t_expected_prev;
reg [3:0] a2_t_expected_prev;
reg [3:0] b1_t_expected_prev;
reg [3:0] b2_t_expected_prev;
reg [15:0] c_expected_prev;

reg [3:0] last_a1_t_exp;
reg [3:0] last_a2_t_exp;
reg [3:0] last_b1_t_exp;
reg [3:0] last_b2_t_exp;
reg [15:0] last_c_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	a1_t_prev = a1_t;
	a2_t_prev = a2_t;
	b1_t_prev = b1_t;
	b2_t_prev = b2_t;
	c_prev = c;
end

// update expected /o prevs

always @(trigger)
begin
	a1_t_expected_prev = a1_t_expected;
	a2_t_expected_prev = a2_t_expected;
	b1_t_expected_prev = b1_t_expected;
	b2_t_expected_prev = b2_t_expected;
	c_expected_prev = c_expected;
end



// expected c[3]
initial
begin
	c_expected[3] = 1'bX;
end 

// expected c[2]
initial
begin
	c_expected[2] = 1'bX;
end 

// expected c[1]
initial
begin
	c_expected[1] = 1'bX;
end 

// expected c[0]
initial
begin
	c_expected[0] = 1'bX;
end 

// expected c[7]
initial
begin
	c_expected[7] = 1'bX;
end 

// expected c[6]
initial
begin
	c_expected[6] = 1'bX;
end 

// expected c[5]
initial
begin
	c_expected[5] = 1'bX;
end 

// expected c[4]
initial
begin
	c_expected[4] = 1'bX;
end 

// expected c[11]
initial
begin
	c_expected[11] = 1'bX;
end 

// expected c[10]
initial
begin
	c_expected[10] = 1'bX;
end 

// expected c[9]
initial
begin
	c_expected[9] = 1'bX;
end 

// expected c[8]
initial
begin
	c_expected[8] = 1'bX;
end 

// expected c[15]
initial
begin
	c_expected[15] = 1'bX;
end 

// expected c[14]
initial
begin
	c_expected[14] = 1'bX;
end 

// expected c[13]
initial
begin
	c_expected[13] = 1'bX;
end 

// expected c[12]
initial
begin
	c_expected[12] = 1'bX;
end 
// expected a2_t[ 3 ]
initial
begin
	a2_t_expected[3] = 1'bX;
end 
// expected a2_t[ 2 ]
initial
begin
	a2_t_expected[2] = 1'bX;
end 
// expected a2_t[ 1 ]
initial
begin
	a2_t_expected[1] = 1'bX;
end 
// expected a2_t[ 0 ]
initial
begin
	a2_t_expected[0] = 1'bX;
end 
// expected a1_t[ 3 ]
initial
begin
	a1_t_expected[3] = 1'bX;
end 
// expected a1_t[ 2 ]
initial
begin
	a1_t_expected[2] = 1'bX;
end 
// expected a1_t[ 1 ]
initial
begin
	a1_t_expected[1] = 1'bX;
end 
// expected a1_t[ 0 ]
initial
begin
	a1_t_expected[0] = 1'bX;
end 
// expected b1_t[ 3 ]
initial
begin
	b1_t_expected[3] = 1'bX;
end 
// expected b1_t[ 2 ]
initial
begin
	b1_t_expected[2] = 1'bX;
end 
// expected b1_t[ 1 ]
initial
begin
	b1_t_expected[1] = 1'bX;
end 
// expected b1_t[ 0 ]
initial
begin
	b1_t_expected[0] = 1'bX;
end 
// expected b2_t[ 3 ]
initial
begin
	b2_t_expected[3] = 1'bX;
end 
// expected b2_t[ 2 ]
initial
begin
	b2_t_expected[2] = 1'bX;
end 
// expected b2_t[ 1 ]
initial
begin
	b2_t_expected[1] = 1'bX;
end 
// expected b2_t[ 0 ]
initial
begin
	b2_t_expected[0] = 1'bX;
end 
// generate trigger
always @(a1_t_expected or a1_t or a2_t_expected or a2_t or b1_t_expected or b1_t or b2_t_expected or b2_t or c_expected or c)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a1_t = %b | expected a2_t = %b | expected b1_t = %b | expected b2_t = %b | expected c = %b | ",a1_t_expected_prev,a2_t_expected_prev,b1_t_expected_prev,b2_t_expected_prev,c_expected_prev);
	$display("| real a1_t = %b | real a2_t = %b | real b1_t = %b | real b2_t = %b | real c = %b | ",a1_t_prev,a2_t_prev,b1_t_prev,b2_t_prev,c_prev);
`endif
	if (
		( a1_t_expected_prev[0] !== 1'bx ) && ( a1_t_prev[0] !== a1_t_expected_prev[0] )
		&& ((a1_t_expected_prev[0] !== last_a1_t_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a1_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a1_t_expected_prev);
		$display ("     Real value = %b", a1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a1_t_exp[0] = a1_t_expected_prev[0];
	end
	if (
		( a1_t_expected_prev[1] !== 1'bx ) && ( a1_t_prev[1] !== a1_t_expected_prev[1] )
		&& ((a1_t_expected_prev[1] !== last_a1_t_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a1_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a1_t_expected_prev);
		$display ("     Real value = %b", a1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a1_t_exp[1] = a1_t_expected_prev[1];
	end
	if (
		( a1_t_expected_prev[2] !== 1'bx ) && ( a1_t_prev[2] !== a1_t_expected_prev[2] )
		&& ((a1_t_expected_prev[2] !== last_a1_t_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a1_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a1_t_expected_prev);
		$display ("     Real value = %b", a1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a1_t_exp[2] = a1_t_expected_prev[2];
	end
	if (
		( a1_t_expected_prev[3] !== 1'bx ) && ( a1_t_prev[3] !== a1_t_expected_prev[3] )
		&& ((a1_t_expected_prev[3] !== last_a1_t_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a1_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a1_t_expected_prev);
		$display ("     Real value = %b", a1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a1_t_exp[3] = a1_t_expected_prev[3];
	end
	if (
		( a2_t_expected_prev[0] !== 1'bx ) && ( a2_t_prev[0] !== a2_t_expected_prev[0] )
		&& ((a2_t_expected_prev[0] !== last_a2_t_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a2_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a2_t_expected_prev);
		$display ("     Real value = %b", a2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_a2_t_exp[0] = a2_t_expected_prev[0];
	end
	if (
		( a2_t_expected_prev[1] !== 1'bx ) && ( a2_t_prev[1] !== a2_t_expected_prev[1] )
		&& ((a2_t_expected_prev[1] !== last_a2_t_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a2_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a2_t_expected_prev);
		$display ("     Real value = %b", a2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_a2_t_exp[1] = a2_t_expected_prev[1];
	end
	if (
		( a2_t_expected_prev[2] !== 1'bx ) && ( a2_t_prev[2] !== a2_t_expected_prev[2] )
		&& ((a2_t_expected_prev[2] !== last_a2_t_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a2_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a2_t_expected_prev);
		$display ("     Real value = %b", a2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_a2_t_exp[2] = a2_t_expected_prev[2];
	end
	if (
		( a2_t_expected_prev[3] !== 1'bx ) && ( a2_t_prev[3] !== a2_t_expected_prev[3] )
		&& ((a2_t_expected_prev[3] !== last_a2_t_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a2_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a2_t_expected_prev);
		$display ("     Real value = %b", a2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_a2_t_exp[3] = a2_t_expected_prev[3];
	end
	if (
		( b1_t_expected_prev[0] !== 1'bx ) && ( b1_t_prev[0] !== b1_t_expected_prev[0] )
		&& ((b1_t_expected_prev[0] !== last_b1_t_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b1_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b1_t_expected_prev);
		$display ("     Real value = %b", b1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b1_t_exp[0] = b1_t_expected_prev[0];
	end
	if (
		( b1_t_expected_prev[1] !== 1'bx ) && ( b1_t_prev[1] !== b1_t_expected_prev[1] )
		&& ((b1_t_expected_prev[1] !== last_b1_t_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b1_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b1_t_expected_prev);
		$display ("     Real value = %b", b1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b1_t_exp[1] = b1_t_expected_prev[1];
	end
	if (
		( b1_t_expected_prev[2] !== 1'bx ) && ( b1_t_prev[2] !== b1_t_expected_prev[2] )
		&& ((b1_t_expected_prev[2] !== last_b1_t_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b1_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b1_t_expected_prev);
		$display ("     Real value = %b", b1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b1_t_exp[2] = b1_t_expected_prev[2];
	end
	if (
		( b1_t_expected_prev[3] !== 1'bx ) && ( b1_t_prev[3] !== b1_t_expected_prev[3] )
		&& ((b1_t_expected_prev[3] !== last_b1_t_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b1_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b1_t_expected_prev);
		$display ("     Real value = %b", b1_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b1_t_exp[3] = b1_t_expected_prev[3];
	end
	if (
		( b2_t_expected_prev[0] !== 1'bx ) && ( b2_t_prev[0] !== b2_t_expected_prev[0] )
		&& ((b2_t_expected_prev[0] !== last_b2_t_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b2_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b2_t_expected_prev);
		$display ("     Real value = %b", b2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_b2_t_exp[0] = b2_t_expected_prev[0];
	end
	if (
		( b2_t_expected_prev[1] !== 1'bx ) && ( b2_t_prev[1] !== b2_t_expected_prev[1] )
		&& ((b2_t_expected_prev[1] !== last_b2_t_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b2_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b2_t_expected_prev);
		$display ("     Real value = %b", b2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_b2_t_exp[1] = b2_t_expected_prev[1];
	end
	if (
		( b2_t_expected_prev[2] !== 1'bx ) && ( b2_t_prev[2] !== b2_t_expected_prev[2] )
		&& ((b2_t_expected_prev[2] !== last_b2_t_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b2_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b2_t_expected_prev);
		$display ("     Real value = %b", b2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_b2_t_exp[2] = b2_t_expected_prev[2];
	end
	if (
		( b2_t_expected_prev[3] !== 1'bx ) && ( b2_t_prev[3] !== b2_t_expected_prev[3] )
		&& ((b2_t_expected_prev[3] !== last_b2_t_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b2_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b2_t_expected_prev);
		$display ("     Real value = %b", b2_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_b2_t_exp[3] = b2_t_expected_prev[3];
	end
	if (
		( c_expected_prev[0] !== 1'bx ) && ( c_prev[0] !== c_expected_prev[0] )
		&& ((c_expected_prev[0] !== last_c_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[0] = c_expected_prev[0];
	end
	if (
		( c_expected_prev[1] !== 1'bx ) && ( c_prev[1] !== c_expected_prev[1] )
		&& ((c_expected_prev[1] !== last_c_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[1] = c_expected_prev[1];
	end
	if (
		( c_expected_prev[2] !== 1'bx ) && ( c_prev[2] !== c_expected_prev[2] )
		&& ((c_expected_prev[2] !== last_c_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[2] = c_expected_prev[2];
	end
	if (
		( c_expected_prev[3] !== 1'bx ) && ( c_prev[3] !== c_expected_prev[3] )
		&& ((c_expected_prev[3] !== last_c_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[3] = c_expected_prev[3];
	end
	if (
		( c_expected_prev[4] !== 1'bx ) && ( c_prev[4] !== c_expected_prev[4] )
		&& ((c_expected_prev[4] !== last_c_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[4] = c_expected_prev[4];
	end
	if (
		( c_expected_prev[5] !== 1'bx ) && ( c_prev[5] !== c_expected_prev[5] )
		&& ((c_expected_prev[5] !== last_c_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[5] = c_expected_prev[5];
	end
	if (
		( c_expected_prev[6] !== 1'bx ) && ( c_prev[6] !== c_expected_prev[6] )
		&& ((c_expected_prev[6] !== last_c_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[6] = c_expected_prev[6];
	end
	if (
		( c_expected_prev[7] !== 1'bx ) && ( c_prev[7] !== c_expected_prev[7] )
		&& ((c_expected_prev[7] !== last_c_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[7] = c_expected_prev[7];
	end
	if (
		( c_expected_prev[8] !== 1'bx ) && ( c_prev[8] !== c_expected_prev[8] )
		&& ((c_expected_prev[8] !== last_c_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[8] = c_expected_prev[8];
	end
	if (
		( c_expected_prev[9] !== 1'bx ) && ( c_prev[9] !== c_expected_prev[9] )
		&& ((c_expected_prev[9] !== last_c_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[9] = c_expected_prev[9];
	end
	if (
		( c_expected_prev[10] !== 1'bx ) && ( c_prev[10] !== c_expected_prev[10] )
		&& ((c_expected_prev[10] !== last_c_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[10] = c_expected_prev[10];
	end
	if (
		( c_expected_prev[11] !== 1'bx ) && ( c_prev[11] !== c_expected_prev[11] )
		&& ((c_expected_prev[11] !== last_c_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[11] = c_expected_prev[11];
	end
	if (
		( c_expected_prev[12] !== 1'bx ) && ( c_prev[12] !== c_expected_prev[12] )
		&& ((c_expected_prev[12] !== last_c_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[12] = c_expected_prev[12];
	end
	if (
		( c_expected_prev[13] !== 1'bx ) && ( c_prev[13] !== c_expected_prev[13] )
		&& ((c_expected_prev[13] !== last_c_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[13] = c_expected_prev[13];
	end
	if (
		( c_expected_prev[14] !== 1'bx ) && ( c_prev[14] !== c_expected_prev[14] )
		&& ((c_expected_prev[14] !== last_c_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[14] = c_expected_prev[14];
	end
	if (
		( c_expected_prev[15] !== 1'bx ) && ( c_prev[15] !== c_expected_prev[15] )
		&& ((c_expected_prev[15] !== last_c_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp[15] = c_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module m_2to4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] inba;
// wires                                               
wire [3:0] a1_t;
wire [3:0] a2_t;
wire [3:0] b1_t;
wire [3:0] b2_t;
wire [15:0] c;

wire sampler;                             

// assign statements (if any)                          
m_2to4 i1 (
// port map - connection between master ports and signals/registers   
	.a1_t(a1_t),
	.a2_t(a2_t),
	.b1_t(b1_t),
	.b2_t(b2_t),
	.c(c),
	.inba(inba)
);

// inba[3]
initial
begin
	inba[3] = 1'b0;
	inba[3] = #20000 1'b1;
	inba[3] = #30000 1'b0;
end 

// inba[2]
initial
begin
	inba[2] = 1'b0;
	inba[2] = #20000 1'b1;
	inba[2] = #30000 1'b0;
end 

// inba[1]
initial
begin
	inba[1] = 1'b0;
end 

// inba[0]
initial
begin
	inba[0] = 1'b0;
	inba[0] = #20000 1'b1;
	inba[0] = #30000 1'b0;
end 

// inba[7]
initial
begin
	inba[7] = 1'b0;
	inba[7] = #20000 1'b1;
	inba[7] = #30000 1'b0;
end 

// inba[6]
initial
begin
	inba[6] = 1'b0;
	inba[6] = #20000 1'b1;
	inba[6] = #30000 1'b0;
end 

// inba[5]
initial
begin
	inba[5] = 1'b0;
	inba[5] = #20000 1'b1;
	inba[5] = #30000 1'b0;
end 

// inba[4]
initial
begin
	inba[4] = 1'b0;
end 

// inba[11]
initial
begin
	inba[11] = 1'b0;
end 

// inba[10]
initial
begin
	inba[10] = 1'b0;
end 

// inba[9]
initial
begin
	inba[9] = 1'b0;
end 

// inba[8]
initial
begin
	inba[8] = 1'b0;
	inba[8] = #20000 1'b1;
	inba[8] = #30000 1'b0;
end 

// inba[15]
initial
begin
	inba[15] = 1'b0;
end 

// inba[14]
initial
begin
	inba[14] = 1'b0;
end 

// inba[13]
initial
begin
	inba[13] = 1'b0;
	inba[13] = #20000 1'b1;
	inba[13] = #30000 1'b0;
end 

// inba[12]
initial
begin
	inba[12] = 1'b0;
end 

m_2to4_vlg_sample_tst tb_sample (
	.inba(inba),
	.sampler_tx(sampler)
);

m_2to4_vlg_check_tst tb_out(
	.a1_t(a1_t),
	.a2_t(a2_t),
	.b1_t(b1_t),
	.b2_t(b2_t),
	.c(c),
	.sampler_rx(sampler)
);
endmodule

