// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/06/2021 17:49:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bufferTri
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bufferTri_vlg_sample_tst(
	din,
	en,
	sampler_tx
);
input [31:0] din;
input  en;
output sampler_tx;

reg sample;
time current_time;
always @(din or en)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bufferTri_vlg_check_tst (
	dout1,
	dout2,
	sampler_rx
);
input [31:0] dout1;
input [31:0] dout2;
input sampler_rx;

reg [31:0] dout1_expected;
reg [31:0] dout2_expected;

reg [31:0] dout1_prev;
reg [31:0] dout2_prev;

reg [31:0] dout1_expected_prev;
reg [31:0] dout2_expected_prev;

reg [31:0] last_dout1_exp;
reg [31:0] last_dout2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	dout1_prev = dout1;
	dout2_prev = dout2;
end

// update expected /o prevs

always @(trigger)
begin
	dout1_expected_prev = dout1_expected;
	dout2_expected_prev = dout2_expected;
end


// expected dout1[ 31 ]
initial
begin
	dout1_expected[31] = 1'bX;
end 
// expected dout1[ 30 ]
initial
begin
	dout1_expected[30] = 1'bX;
end 
// expected dout1[ 29 ]
initial
begin
	dout1_expected[29] = 1'bX;
end 
// expected dout1[ 28 ]
initial
begin
	dout1_expected[28] = 1'bX;
end 
// expected dout1[ 27 ]
initial
begin
	dout1_expected[27] = 1'bX;
end 
// expected dout1[ 26 ]
initial
begin
	dout1_expected[26] = 1'bX;
end 
// expected dout1[ 25 ]
initial
begin
	dout1_expected[25] = 1'bX;
end 
// expected dout1[ 24 ]
initial
begin
	dout1_expected[24] = 1'bX;
end 
// expected dout1[ 23 ]
initial
begin
	dout1_expected[23] = 1'bX;
end 
// expected dout1[ 22 ]
initial
begin
	dout1_expected[22] = 1'bX;
end 
// expected dout1[ 21 ]
initial
begin
	dout1_expected[21] = 1'bX;
end 
// expected dout1[ 20 ]
initial
begin
	dout1_expected[20] = 1'bX;
end 
// expected dout1[ 19 ]
initial
begin
	dout1_expected[19] = 1'bX;
end 
// expected dout1[ 18 ]
initial
begin
	dout1_expected[18] = 1'bX;
end 
// expected dout1[ 17 ]
initial
begin
	dout1_expected[17] = 1'bX;
end 
// expected dout1[ 16 ]
initial
begin
	dout1_expected[16] = 1'bX;
end 
// expected dout1[ 15 ]
initial
begin
	dout1_expected[15] = 1'bX;
end 
// expected dout1[ 14 ]
initial
begin
	dout1_expected[14] = 1'bX;
end 
// expected dout1[ 13 ]
initial
begin
	dout1_expected[13] = 1'bX;
end 
// expected dout1[ 12 ]
initial
begin
	dout1_expected[12] = 1'bX;
end 
// expected dout1[ 11 ]
initial
begin
	dout1_expected[11] = 1'bX;
end 
// expected dout1[ 10 ]
initial
begin
	dout1_expected[10] = 1'bX;
end 
// expected dout1[ 9 ]
initial
begin
	dout1_expected[9] = 1'bX;
end 
// expected dout1[ 8 ]
initial
begin
	dout1_expected[8] = 1'bX;
end 
// expected dout1[ 7 ]
initial
begin
	dout1_expected[7] = 1'bX;
end 
// expected dout1[ 6 ]
initial
begin
	dout1_expected[6] = 1'bX;
end 
// expected dout1[ 5 ]
initial
begin
	dout1_expected[5] = 1'bX;
end 
// expected dout1[ 4 ]
initial
begin
	dout1_expected[4] = 1'bX;
end 
// expected dout1[ 3 ]
initial
begin
	dout1_expected[3] = 1'bX;
end 
// expected dout1[ 2 ]
initial
begin
	dout1_expected[2] = 1'bX;
end 
// expected dout1[ 1 ]
initial
begin
	dout1_expected[1] = 1'bX;
end 
// expected dout1[ 0 ]
initial
begin
	dout1_expected[0] = 1'bX;
end 
// expected dout2[ 31 ]
initial
begin
	dout2_expected[31] = 1'bX;
end 
// expected dout2[ 30 ]
initial
begin
	dout2_expected[30] = 1'bX;
end 
// expected dout2[ 29 ]
initial
begin
	dout2_expected[29] = 1'bX;
end 
// expected dout2[ 28 ]
initial
begin
	dout2_expected[28] = 1'bX;
end 
// expected dout2[ 27 ]
initial
begin
	dout2_expected[27] = 1'bX;
end 
// expected dout2[ 26 ]
initial
begin
	dout2_expected[26] = 1'bX;
end 
// expected dout2[ 25 ]
initial
begin
	dout2_expected[25] = 1'bX;
end 
// expected dout2[ 24 ]
initial
begin
	dout2_expected[24] = 1'bX;
end 
// expected dout2[ 23 ]
initial
begin
	dout2_expected[23] = 1'bX;
end 
// expected dout2[ 22 ]
initial
begin
	dout2_expected[22] = 1'bX;
end 
// expected dout2[ 21 ]
initial
begin
	dout2_expected[21] = 1'bX;
end 
// expected dout2[ 20 ]
initial
begin
	dout2_expected[20] = 1'bX;
end 
// expected dout2[ 19 ]
initial
begin
	dout2_expected[19] = 1'bX;
end 
// expected dout2[ 18 ]
initial
begin
	dout2_expected[18] = 1'bX;
end 
// expected dout2[ 17 ]
initial
begin
	dout2_expected[17] = 1'bX;
end 
// expected dout2[ 16 ]
initial
begin
	dout2_expected[16] = 1'bX;
end 
// expected dout2[ 15 ]
initial
begin
	dout2_expected[15] = 1'bX;
end 
// expected dout2[ 14 ]
initial
begin
	dout2_expected[14] = 1'bX;
end 
// expected dout2[ 13 ]
initial
begin
	dout2_expected[13] = 1'bX;
end 
// expected dout2[ 12 ]
initial
begin
	dout2_expected[12] = 1'bX;
end 
// expected dout2[ 11 ]
initial
begin
	dout2_expected[11] = 1'bX;
end 
// expected dout2[ 10 ]
initial
begin
	dout2_expected[10] = 1'bX;
end 
// expected dout2[ 9 ]
initial
begin
	dout2_expected[9] = 1'bX;
end 
// expected dout2[ 8 ]
initial
begin
	dout2_expected[8] = 1'bX;
end 
// expected dout2[ 7 ]
initial
begin
	dout2_expected[7] = 1'bX;
end 
// expected dout2[ 6 ]
initial
begin
	dout2_expected[6] = 1'bX;
end 
// expected dout2[ 5 ]
initial
begin
	dout2_expected[5] = 1'bX;
end 
// expected dout2[ 4 ]
initial
begin
	dout2_expected[4] = 1'bX;
end 
// expected dout2[ 3 ]
initial
begin
	dout2_expected[3] = 1'bX;
end 
// expected dout2[ 2 ]
initial
begin
	dout2_expected[2] = 1'bX;
end 
// expected dout2[ 1 ]
initial
begin
	dout2_expected[1] = 1'bX;
end 
// expected dout2[ 0 ]
initial
begin
	dout2_expected[0] = 1'bX;
end 
// generate trigger
always @(dout1_expected or dout1 or dout2_expected or dout2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dout1 = %b | expected dout2 = %b | ",dout1_expected_prev,dout2_expected_prev);
	$display("| real dout1 = %b | real dout2 = %b | ",dout1_prev,dout2_prev);
`endif
	if (
		( dout1_expected_prev[0] !== 1'bx ) && ( dout1_prev[0] !== dout1_expected_prev[0] )
		&& ((dout1_expected_prev[0] !== last_dout1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[0] = dout1_expected_prev[0];
	end
	if (
		( dout1_expected_prev[1] !== 1'bx ) && ( dout1_prev[1] !== dout1_expected_prev[1] )
		&& ((dout1_expected_prev[1] !== last_dout1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[1] = dout1_expected_prev[1];
	end
	if (
		( dout1_expected_prev[2] !== 1'bx ) && ( dout1_prev[2] !== dout1_expected_prev[2] )
		&& ((dout1_expected_prev[2] !== last_dout1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[2] = dout1_expected_prev[2];
	end
	if (
		( dout1_expected_prev[3] !== 1'bx ) && ( dout1_prev[3] !== dout1_expected_prev[3] )
		&& ((dout1_expected_prev[3] !== last_dout1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[3] = dout1_expected_prev[3];
	end
	if (
		( dout1_expected_prev[4] !== 1'bx ) && ( dout1_prev[4] !== dout1_expected_prev[4] )
		&& ((dout1_expected_prev[4] !== last_dout1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[4] = dout1_expected_prev[4];
	end
	if (
		( dout1_expected_prev[5] !== 1'bx ) && ( dout1_prev[5] !== dout1_expected_prev[5] )
		&& ((dout1_expected_prev[5] !== last_dout1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[5] = dout1_expected_prev[5];
	end
	if (
		( dout1_expected_prev[6] !== 1'bx ) && ( dout1_prev[6] !== dout1_expected_prev[6] )
		&& ((dout1_expected_prev[6] !== last_dout1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[6] = dout1_expected_prev[6];
	end
	if (
		( dout1_expected_prev[7] !== 1'bx ) && ( dout1_prev[7] !== dout1_expected_prev[7] )
		&& ((dout1_expected_prev[7] !== last_dout1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[7] = dout1_expected_prev[7];
	end
	if (
		( dout1_expected_prev[8] !== 1'bx ) && ( dout1_prev[8] !== dout1_expected_prev[8] )
		&& ((dout1_expected_prev[8] !== last_dout1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[8] = dout1_expected_prev[8];
	end
	if (
		( dout1_expected_prev[9] !== 1'bx ) && ( dout1_prev[9] !== dout1_expected_prev[9] )
		&& ((dout1_expected_prev[9] !== last_dout1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[9] = dout1_expected_prev[9];
	end
	if (
		( dout1_expected_prev[10] !== 1'bx ) && ( dout1_prev[10] !== dout1_expected_prev[10] )
		&& ((dout1_expected_prev[10] !== last_dout1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[10] = dout1_expected_prev[10];
	end
	if (
		( dout1_expected_prev[11] !== 1'bx ) && ( dout1_prev[11] !== dout1_expected_prev[11] )
		&& ((dout1_expected_prev[11] !== last_dout1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[11] = dout1_expected_prev[11];
	end
	if (
		( dout1_expected_prev[12] !== 1'bx ) && ( dout1_prev[12] !== dout1_expected_prev[12] )
		&& ((dout1_expected_prev[12] !== last_dout1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[12] = dout1_expected_prev[12];
	end
	if (
		( dout1_expected_prev[13] !== 1'bx ) && ( dout1_prev[13] !== dout1_expected_prev[13] )
		&& ((dout1_expected_prev[13] !== last_dout1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[13] = dout1_expected_prev[13];
	end
	if (
		( dout1_expected_prev[14] !== 1'bx ) && ( dout1_prev[14] !== dout1_expected_prev[14] )
		&& ((dout1_expected_prev[14] !== last_dout1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[14] = dout1_expected_prev[14];
	end
	if (
		( dout1_expected_prev[15] !== 1'bx ) && ( dout1_prev[15] !== dout1_expected_prev[15] )
		&& ((dout1_expected_prev[15] !== last_dout1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[15] = dout1_expected_prev[15];
	end
	if (
		( dout1_expected_prev[16] !== 1'bx ) && ( dout1_prev[16] !== dout1_expected_prev[16] )
		&& ((dout1_expected_prev[16] !== last_dout1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[16] = dout1_expected_prev[16];
	end
	if (
		( dout1_expected_prev[17] !== 1'bx ) && ( dout1_prev[17] !== dout1_expected_prev[17] )
		&& ((dout1_expected_prev[17] !== last_dout1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[17] = dout1_expected_prev[17];
	end
	if (
		( dout1_expected_prev[18] !== 1'bx ) && ( dout1_prev[18] !== dout1_expected_prev[18] )
		&& ((dout1_expected_prev[18] !== last_dout1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[18] = dout1_expected_prev[18];
	end
	if (
		( dout1_expected_prev[19] !== 1'bx ) && ( dout1_prev[19] !== dout1_expected_prev[19] )
		&& ((dout1_expected_prev[19] !== last_dout1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[19] = dout1_expected_prev[19];
	end
	if (
		( dout1_expected_prev[20] !== 1'bx ) && ( dout1_prev[20] !== dout1_expected_prev[20] )
		&& ((dout1_expected_prev[20] !== last_dout1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[20] = dout1_expected_prev[20];
	end
	if (
		( dout1_expected_prev[21] !== 1'bx ) && ( dout1_prev[21] !== dout1_expected_prev[21] )
		&& ((dout1_expected_prev[21] !== last_dout1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[21] = dout1_expected_prev[21];
	end
	if (
		( dout1_expected_prev[22] !== 1'bx ) && ( dout1_prev[22] !== dout1_expected_prev[22] )
		&& ((dout1_expected_prev[22] !== last_dout1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[22] = dout1_expected_prev[22];
	end
	if (
		( dout1_expected_prev[23] !== 1'bx ) && ( dout1_prev[23] !== dout1_expected_prev[23] )
		&& ((dout1_expected_prev[23] !== last_dout1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[23] = dout1_expected_prev[23];
	end
	if (
		( dout1_expected_prev[24] !== 1'bx ) && ( dout1_prev[24] !== dout1_expected_prev[24] )
		&& ((dout1_expected_prev[24] !== last_dout1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[24] = dout1_expected_prev[24];
	end
	if (
		( dout1_expected_prev[25] !== 1'bx ) && ( dout1_prev[25] !== dout1_expected_prev[25] )
		&& ((dout1_expected_prev[25] !== last_dout1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[25] = dout1_expected_prev[25];
	end
	if (
		( dout1_expected_prev[26] !== 1'bx ) && ( dout1_prev[26] !== dout1_expected_prev[26] )
		&& ((dout1_expected_prev[26] !== last_dout1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[26] = dout1_expected_prev[26];
	end
	if (
		( dout1_expected_prev[27] !== 1'bx ) && ( dout1_prev[27] !== dout1_expected_prev[27] )
		&& ((dout1_expected_prev[27] !== last_dout1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[27] = dout1_expected_prev[27];
	end
	if (
		( dout1_expected_prev[28] !== 1'bx ) && ( dout1_prev[28] !== dout1_expected_prev[28] )
		&& ((dout1_expected_prev[28] !== last_dout1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[28] = dout1_expected_prev[28];
	end
	if (
		( dout1_expected_prev[29] !== 1'bx ) && ( dout1_prev[29] !== dout1_expected_prev[29] )
		&& ((dout1_expected_prev[29] !== last_dout1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[29] = dout1_expected_prev[29];
	end
	if (
		( dout1_expected_prev[30] !== 1'bx ) && ( dout1_prev[30] !== dout1_expected_prev[30] )
		&& ((dout1_expected_prev[30] !== last_dout1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[30] = dout1_expected_prev[30];
	end
	if (
		( dout1_expected_prev[31] !== 1'bx ) && ( dout1_prev[31] !== dout1_expected_prev[31] )
		&& ((dout1_expected_prev[31] !== last_dout1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout1_exp[31] = dout1_expected_prev[31];
	end
	if (
		( dout2_expected_prev[0] !== 1'bx ) && ( dout2_prev[0] !== dout2_expected_prev[0] )
		&& ((dout2_expected_prev[0] !== last_dout2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[0] = dout2_expected_prev[0];
	end
	if (
		( dout2_expected_prev[1] !== 1'bx ) && ( dout2_prev[1] !== dout2_expected_prev[1] )
		&& ((dout2_expected_prev[1] !== last_dout2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[1] = dout2_expected_prev[1];
	end
	if (
		( dout2_expected_prev[2] !== 1'bx ) && ( dout2_prev[2] !== dout2_expected_prev[2] )
		&& ((dout2_expected_prev[2] !== last_dout2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[2] = dout2_expected_prev[2];
	end
	if (
		( dout2_expected_prev[3] !== 1'bx ) && ( dout2_prev[3] !== dout2_expected_prev[3] )
		&& ((dout2_expected_prev[3] !== last_dout2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[3] = dout2_expected_prev[3];
	end
	if (
		( dout2_expected_prev[4] !== 1'bx ) && ( dout2_prev[4] !== dout2_expected_prev[4] )
		&& ((dout2_expected_prev[4] !== last_dout2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[4] = dout2_expected_prev[4];
	end
	if (
		( dout2_expected_prev[5] !== 1'bx ) && ( dout2_prev[5] !== dout2_expected_prev[5] )
		&& ((dout2_expected_prev[5] !== last_dout2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[5] = dout2_expected_prev[5];
	end
	if (
		( dout2_expected_prev[6] !== 1'bx ) && ( dout2_prev[6] !== dout2_expected_prev[6] )
		&& ((dout2_expected_prev[6] !== last_dout2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[6] = dout2_expected_prev[6];
	end
	if (
		( dout2_expected_prev[7] !== 1'bx ) && ( dout2_prev[7] !== dout2_expected_prev[7] )
		&& ((dout2_expected_prev[7] !== last_dout2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[7] = dout2_expected_prev[7];
	end
	if (
		( dout2_expected_prev[8] !== 1'bx ) && ( dout2_prev[8] !== dout2_expected_prev[8] )
		&& ((dout2_expected_prev[8] !== last_dout2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[8] = dout2_expected_prev[8];
	end
	if (
		( dout2_expected_prev[9] !== 1'bx ) && ( dout2_prev[9] !== dout2_expected_prev[9] )
		&& ((dout2_expected_prev[9] !== last_dout2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[9] = dout2_expected_prev[9];
	end
	if (
		( dout2_expected_prev[10] !== 1'bx ) && ( dout2_prev[10] !== dout2_expected_prev[10] )
		&& ((dout2_expected_prev[10] !== last_dout2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[10] = dout2_expected_prev[10];
	end
	if (
		( dout2_expected_prev[11] !== 1'bx ) && ( dout2_prev[11] !== dout2_expected_prev[11] )
		&& ((dout2_expected_prev[11] !== last_dout2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[11] = dout2_expected_prev[11];
	end
	if (
		( dout2_expected_prev[12] !== 1'bx ) && ( dout2_prev[12] !== dout2_expected_prev[12] )
		&& ((dout2_expected_prev[12] !== last_dout2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[12] = dout2_expected_prev[12];
	end
	if (
		( dout2_expected_prev[13] !== 1'bx ) && ( dout2_prev[13] !== dout2_expected_prev[13] )
		&& ((dout2_expected_prev[13] !== last_dout2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[13] = dout2_expected_prev[13];
	end
	if (
		( dout2_expected_prev[14] !== 1'bx ) && ( dout2_prev[14] !== dout2_expected_prev[14] )
		&& ((dout2_expected_prev[14] !== last_dout2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[14] = dout2_expected_prev[14];
	end
	if (
		( dout2_expected_prev[15] !== 1'bx ) && ( dout2_prev[15] !== dout2_expected_prev[15] )
		&& ((dout2_expected_prev[15] !== last_dout2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[15] = dout2_expected_prev[15];
	end
	if (
		( dout2_expected_prev[16] !== 1'bx ) && ( dout2_prev[16] !== dout2_expected_prev[16] )
		&& ((dout2_expected_prev[16] !== last_dout2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[16] = dout2_expected_prev[16];
	end
	if (
		( dout2_expected_prev[17] !== 1'bx ) && ( dout2_prev[17] !== dout2_expected_prev[17] )
		&& ((dout2_expected_prev[17] !== last_dout2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[17] = dout2_expected_prev[17];
	end
	if (
		( dout2_expected_prev[18] !== 1'bx ) && ( dout2_prev[18] !== dout2_expected_prev[18] )
		&& ((dout2_expected_prev[18] !== last_dout2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[18] = dout2_expected_prev[18];
	end
	if (
		( dout2_expected_prev[19] !== 1'bx ) && ( dout2_prev[19] !== dout2_expected_prev[19] )
		&& ((dout2_expected_prev[19] !== last_dout2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[19] = dout2_expected_prev[19];
	end
	if (
		( dout2_expected_prev[20] !== 1'bx ) && ( dout2_prev[20] !== dout2_expected_prev[20] )
		&& ((dout2_expected_prev[20] !== last_dout2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[20] = dout2_expected_prev[20];
	end
	if (
		( dout2_expected_prev[21] !== 1'bx ) && ( dout2_prev[21] !== dout2_expected_prev[21] )
		&& ((dout2_expected_prev[21] !== last_dout2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[21] = dout2_expected_prev[21];
	end
	if (
		( dout2_expected_prev[22] !== 1'bx ) && ( dout2_prev[22] !== dout2_expected_prev[22] )
		&& ((dout2_expected_prev[22] !== last_dout2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[22] = dout2_expected_prev[22];
	end
	if (
		( dout2_expected_prev[23] !== 1'bx ) && ( dout2_prev[23] !== dout2_expected_prev[23] )
		&& ((dout2_expected_prev[23] !== last_dout2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[23] = dout2_expected_prev[23];
	end
	if (
		( dout2_expected_prev[24] !== 1'bx ) && ( dout2_prev[24] !== dout2_expected_prev[24] )
		&& ((dout2_expected_prev[24] !== last_dout2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[24] = dout2_expected_prev[24];
	end
	if (
		( dout2_expected_prev[25] !== 1'bx ) && ( dout2_prev[25] !== dout2_expected_prev[25] )
		&& ((dout2_expected_prev[25] !== last_dout2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[25] = dout2_expected_prev[25];
	end
	if (
		( dout2_expected_prev[26] !== 1'bx ) && ( dout2_prev[26] !== dout2_expected_prev[26] )
		&& ((dout2_expected_prev[26] !== last_dout2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[26] = dout2_expected_prev[26];
	end
	if (
		( dout2_expected_prev[27] !== 1'bx ) && ( dout2_prev[27] !== dout2_expected_prev[27] )
		&& ((dout2_expected_prev[27] !== last_dout2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[27] = dout2_expected_prev[27];
	end
	if (
		( dout2_expected_prev[28] !== 1'bx ) && ( dout2_prev[28] !== dout2_expected_prev[28] )
		&& ((dout2_expected_prev[28] !== last_dout2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[28] = dout2_expected_prev[28];
	end
	if (
		( dout2_expected_prev[29] !== 1'bx ) && ( dout2_prev[29] !== dout2_expected_prev[29] )
		&& ((dout2_expected_prev[29] !== last_dout2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[29] = dout2_expected_prev[29];
	end
	if (
		( dout2_expected_prev[30] !== 1'bx ) && ( dout2_prev[30] !== dout2_expected_prev[30] )
		&& ((dout2_expected_prev[30] !== last_dout2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[30] = dout2_expected_prev[30];
	end
	if (
		( dout2_expected_prev[31] !== 1'bx ) && ( dout2_prev[31] !== dout2_expected_prev[31] )
		&& ((dout2_expected_prev[31] !== last_dout2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout2_exp[31] = dout2_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bufferTri_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] din;
reg en;
// wires                                               
wire [31:0] dout1;
wire [31:0] dout2;

wire sampler;                             

// assign statements (if any)                          
bufferTri i1 (
// port map - connection between master ports and signals/registers   
	.din(din),
	.dout1(dout1),
	.dout2(dout2),
	.en(en)
);
// din[ 31 ]
initial
begin
	din[31] = 1'b0;
end 
// din[ 30 ]
initial
begin
	din[30] = 1'b0;
end 
// din[ 29 ]
initial
begin
	din[29] = 1'b0;
end 
// din[ 28 ]
initial
begin
	din[28] = 1'b0;
end 
// din[ 27 ]
initial
begin
	din[27] = 1'b0;
end 
// din[ 26 ]
initial
begin
	din[26] = 1'b0;
end 
// din[ 25 ]
initial
begin
	din[25] = 1'b0;
end 
// din[ 24 ]
initial
begin
	din[24] = 1'b0;
end 
// din[ 23 ]
initial
begin
	din[23] = 1'b0;
end 
// din[ 22 ]
initial
begin
	din[22] = 1'b0;
end 
// din[ 21 ]
initial
begin
	din[21] = 1'b0;
end 
// din[ 20 ]
initial
begin
	din[20] = 1'b0;
end 
// din[ 19 ]
initial
begin
	din[19] = 1'b0;
end 
// din[ 18 ]
initial
begin
	din[18] = 1'b0;
end 
// din[ 17 ]
initial
begin
	din[17] = 1'b0;
end 
// din[ 16 ]
initial
begin
	din[16] = 1'b0;
end 
// din[ 15 ]
initial
begin
	din[15] = 1'b0;
end 
// din[ 14 ]
initial
begin
	din[14] = 1'b0;
end 
// din[ 13 ]
initial
begin
	din[13] = 1'b0;
end 
// din[ 12 ]
initial
begin
	din[12] = 1'b0;
end 
// din[ 11 ]
initial
begin
	din[11] = 1'b0;
end 
// din[ 10 ]
initial
begin
	din[10] = 1'b0;
end 
// din[ 9 ]
initial
begin
	din[9] = 1'b0;
end 
// din[ 8 ]
initial
begin
	din[8] = 1'b0;
end 
// din[ 7 ]
initial
begin
	din[7] = 1'b0;
end 
// din[ 6 ]
initial
begin
	din[6] = 1'b0;
end 
// din[ 5 ]
initial
begin
	din[5] = 1'b0;
end 
// din[ 4 ]
initial
begin
	din[4] = 1'b0;
end 
// din[ 3 ]
initial
begin
	din[3] = 1'b0;
end 
// din[ 2 ]
initial
begin
	din[2] = 1'b0;
end 
// din[ 1 ]
initial
begin
	din[1] = 1'b0;
	din[1] = #70000 1'b1;
	din[1] = #40000 1'b0;
end 
// din[ 0 ]
initial
begin
	din[0] = 1'b0;
end 

// en
initial
begin
	en = 1'b0;
	en = #70000 1'b1;
	en = #40000 1'b0;
end 

bufferTri_vlg_sample_tst tb_sample (
	.din(din),
	.en(en),
	.sampler_tx(sampler)
);

bufferTri_vlg_check_tst tb_out(
	.dout1(dout1),
	.dout2(dout2),
	.sampler_rx(sampler)
);
endmodule

