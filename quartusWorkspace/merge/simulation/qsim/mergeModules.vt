// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/03/2021 17:08:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    merge4to8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module merge4to8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] a;
reg [11:0] b;
// wires                                               
wire [23:0] c;

// assign statements (if any)                          
merge4to8 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c)
);
initial 
begin 
#1000000 $finish;
end 

// a[2]
initial
begin
	a[2] = 1'bX;
	a[2] = #20000 1'b0;
	a[2] = #40000 1'bX;
end 

// a[1]
initial
begin
	a[1] = 1'bX;
	a[1] = #20000 1'b0;
	a[1] = #40000 1'bX;
end 

// a[0]
initial
begin
	a[0] = 1'bX;
	a[0] = #20000 1'b1;
	a[0] = #40000 1'bX;
end 

// a[5]
initial
begin
	a[5] = 1'bX;
	a[5] = #20000 1'b0;
	a[5] = #40000 1'bX;
end 

// a[4]
initial
begin
	a[4] = 1'bX;
	a[4] = #20000 1'b1;
	a[4] = #40000 1'bX;
end 

// a[3]
initial
begin
	a[3] = 1'bX;
	a[3] = #20000 1'b1;
	a[3] = #40000 1'bX;
end 

// a[8]
initial
begin
	a[8] = 1'bX;
	a[8] = #20000 1'b1;
	a[8] = #40000 1'bX;
end 

// a[7]
initial
begin
	a[7] = 1'bX;
	a[7] = #20000 1'b0;
	a[7] = #40000 1'bX;
end 

// a[6]
initial
begin
	a[6] = 1'bX;
	a[6] = #20000 1'b0;
	a[6] = #40000 1'bX;
end 

// a[11]
initial
begin
	a[11] = 1'bX;
	a[11] = #20000 1'b1;
	a[11] = #40000 1'bX;
end 

// a[10]
initial
begin
	a[10] = 1'bX;
	a[10] = #20000 1'b0;
	a[10] = #40000 1'bX;
end 

// a[9]
initial
begin
	a[9] = 1'bX;
	a[9] = #20000 1'b1;
	a[9] = #40000 1'bX;
end 

// b[2]
initial
begin
	b[2] = 1'bX;
	b[2] = #20000 1'b0;
	b[2] = #40000 1'bX;
end 

// b[1]
initial
begin
	b[1] = 1'bX;
	b[1] = #20000 1'b0;
	b[1] = #40000 1'bX;
end 

// b[0]
initial
begin
	b[0] = 1'bX;
	b[0] = #20000 1'b0;
	b[0] = #40000 1'bX;
end 

// b[5]
initial
begin
	b[5] = 1'bX;
	b[5] = #20000 1'b0;
	b[5] = #40000 1'bX;
end 

// b[4]
initial
begin
	b[4] = 1'bX;
	b[4] = #20000 1'b1;
	b[4] = #40000 1'bX;
end 

// b[3]
initial
begin
	b[3] = 1'bX;
	b[3] = #20000 1'b1;
	b[3] = #40000 1'bX;
end 

// b[8]
initial
begin
	b[8] = 1'bX;
	b[8] = #20000 1'b1;
	b[8] = #40000 1'bX;
end 

// b[7]
initial
begin
	b[7] = 1'bX;
	b[7] = #20000 1'b0;
	b[7] = #40000 1'bX;
end 

// b[6]
initial
begin
	b[6] = 1'bX;
	b[6] = #20000 1'b1;
	b[6] = #40000 1'bX;
end 

// b[11]
initial
begin
	b[11] = 1'bX;
	b[11] = #20000 1'b1;
	b[11] = #40000 1'bX;
end 

// b[10]
initial
begin
	b[10] = 1'bX;
	b[10] = #20000 1'b1;
	b[10] = #40000 1'bX;
end 

// b[9]
initial
begin
	b[9] = 1'bX;
	b[9] = #20000 1'b1;
	b[9] = #40000 1'bX;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

