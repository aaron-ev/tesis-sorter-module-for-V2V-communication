// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/04/2021 23:46:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    dist2Sorter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dist2Sorter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] inaImag;
reg [7:0] inaReal;
reg [7:0] inbImag;
reg [7:0] inbReal;
reg [7:0] incImag;
reg [7:0] incReal;
reg [7:0] indImag;
reg [7:0] indReal;
reg [3:0] load;
reg rst;
// wires                                               
wire [7:0] c1;
wire [7:0] c2;
wire [7:0] c3;
wire [7:0] c4;
wire [7:0] c5;
wire [7:0] c6;
wire [7:0] c7;
wire [7:0] c8;
wire [7:0] c9;
wire [7:0] c10;
wire [7:0] c11;
wire [7:0] c12;
wire [7:0] c13;
wire [7:0] c14;
wire [7:0] c15;
wire [7:0] c16;

// assign statements (if any)                          
dist2Sorter i1 (
// port map - connection between master ports and signals/registers   
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.c4(c4),
	.c5(c5),
	.c6(c6),
	.c7(c7),
	.c8(c8),
	.c9(c9),
	.c10(c10),
	.c11(c11),
	.c12(c12),
	.c13(c13),
	.c14(c14),
	.c15(c15),
	.c16(c16),
	.clk(clk),
	.inaImag(inaImag),
	.inaReal(inaReal),
	.inbImag(inbImag),
	.inbReal(inbReal),
	.incImag(incImag),
	.incReal(incReal),
	.indImag(indImag),
	.indReal(indReal),
	.load(load),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #60000 1'b1;
	rst = #10000 1'b0;
	rst = #10000 1'b1;
	rst = #80000 1'b0;
end 
// load[ 3 ]
initial
begin
	load[3] = 1'b0;
	load[3] = #150000 1'b1;
	load[3] = #10000 1'b0;
end 
// load[ 2 ]
initial
begin
	load[2] = 1'b0;
	load[2] = #130000 1'b1;
	load[2] = #10000 1'b0;
end 
// load[ 1 ]
initial
begin
	load[1] = 1'b0;
	load[1] = #110000 1'b1;
	load[1] = #10000 1'b0;
end 
// load[ 0 ]
initial
begin
	load[0] = 1'b0;
	load[0] = #80000 1'b1;
	load[0] = #20000 1'b0;
end 
// inaReal[ 7 ]
initial
begin
	inaReal[7] = 1'b0;
end 
// inaReal[ 6 ]
initial
begin
	inaReal[6] = 1'b0;
end 
// inaReal[ 5 ]
initial
begin
	inaReal[5] = 1'b0;
end 
// inaReal[ 4 ]
initial
begin
	inaReal[4] = 1'b0;
end 
// inaReal[ 3 ]
initial
begin
	inaReal[3] = 1'b0;
end 
// inaReal[ 2 ]
initial
begin
	inaReal[2] = 1'b0;
end 
// inaReal[ 1 ]
initial
begin
	inaReal[1] = 1'b0;
	inaReal[1] = #90000 1'b1;
	inaReal[1] = #10000 1'b0;
	inaReal[1] = #10000 1'b1;
	inaReal[1] = #10000 1'b0;
	inaReal[1] = #10000 1'b1;
	inaReal[1] = #10000 1'b0;
end 
// inaReal[ 0 ]
initial
begin
	inaReal[0] = 1'b0;
	inaReal[0] = #90000 1'b1;
	inaReal[0] = #10000 1'b0;
	inaReal[0] = #50000 1'b1;
	inaReal[0] = #10000 1'b0;
end 
// inaImag[ 7 ]
initial
begin
	inaImag[7] = 1'b0;
end 
// inaImag[ 6 ]
initial
begin
	inaImag[6] = 1'b0;
end 
// inaImag[ 5 ]
initial
begin
	inaImag[5] = 1'b0;
end 
// inaImag[ 4 ]
initial
begin
	inaImag[4] = 1'b0;
end 
// inaImag[ 3 ]
initial
begin
	inaImag[3] = 1'b0;
end 
// inaImag[ 2 ]
initial
begin
	inaImag[2] = 1'b0;
end 
// inaImag[ 1 ]
initial
begin
	inaImag[1] = 1'b0;
	inaImag[1] = #90000 1'b1;
	inaImag[1] = #10000 1'b0;
	inaImag[1] = #10000 1'b1;
	inaImag[1] = #10000 1'b0;
	inaImag[1] = #30000 1'b1;
	inaImag[1] = #10000 1'b0;
end 
// inaImag[ 0 ]
initial
begin
	inaImag[0] = 1'b0;
	inaImag[0] = #130000 1'b1;
	inaImag[0] = #10000 1'b0;
end 
// inbReal[ 7 ]
initial
begin
	inbReal[7] = 1'b0;
end 
// inbReal[ 6 ]
initial
begin
	inbReal[6] = 1'b0;
end 
// inbReal[ 5 ]
initial
begin
	inbReal[5] = 1'b0;
end 
// inbReal[ 4 ]
initial
begin
	inbReal[4] = 1'b0;
end 
// inbReal[ 3 ]
initial
begin
	inbReal[3] = 1'b0;
end 
// inbReal[ 2 ]
initial
begin
	inbReal[2] = 1'b0;
end 
// inbReal[ 1 ]
initial
begin
	inbReal[1] = 1'b0;
	inbReal[1] = #90000 1'b1;
	inbReal[1] = #10000 1'b0;
	inbReal[1] = #30000 1'b1;
	inbReal[1] = #10000 1'b0;
end 
// inbReal[ 0 ]
initial
begin
	inbReal[0] = 1'b0;
	inbReal[0] = #110000 1'b1;
	inbReal[0] = #10000 1'b0;
	inbReal[0] = #10000 1'b1;
	inbReal[0] = #10000 1'b0;
end 
// inbImag[ 7 ]
initial
begin
	inbImag[7] = 1'b0;
end 
// inbImag[ 6 ]
initial
begin
	inbImag[6] = 1'b0;
end 
// inbImag[ 5 ]
initial
begin
	inbImag[5] = 1'b0;
end 
// inbImag[ 4 ]
initial
begin
	inbImag[4] = 1'b0;
end 
// inbImag[ 3 ]
initial
begin
	inbImag[3] = 1'b0;
end 
// inbImag[ 2 ]
initial
begin
	inbImag[2] = 1'b0;
end 
// inbImag[ 1 ]
initial
begin
	inbImag[1] = 1'b0;
	inbImag[1] = #150000 1'b1;
	inbImag[1] = #10000 1'b0;
end 
// inbImag[ 0 ]
initial
begin
	inbImag[0] = 1'b0;
	inbImag[0] = #90000 1'b1;
	inbImag[0] = #10000 1'b0;
	inbImag[0] = #10000 1'b1;
	inbImag[0] = #10000 1'b0;
	inbImag[0] = #10000 1'b1;
	inbImag[0] = #10000 1'b0;
end 
// incReal[ 7 ]
initial
begin
	incReal[7] = 1'b0;
end 
// incReal[ 6 ]
initial
begin
	incReal[6] = 1'b0;
end 
// incReal[ 5 ]
initial
begin
	incReal[5] = 1'b0;
end 
// incReal[ 4 ]
initial
begin
	incReal[4] = 1'b0;
end 
// incReal[ 3 ]
initial
begin
	incReal[3] = 1'b0;
end 
// incReal[ 2 ]
initial
begin
	incReal[2] = 1'b0;
end 
// incReal[ 1 ]
initial
begin
	incReal[1] = 1'b0;
	incReal[1] = #90000 1'b1;
	incReal[1] = #10000 1'b0;
	incReal[1] = #10000 1'b1;
	incReal[1] = #10000 1'b0;
	incReal[1] = #30000 1'b1;
	incReal[1] = #10000 1'b0;
end 
// incReal[ 0 ]
initial
begin
	incReal[0] = 1'b0;
	incReal[0] = #90000 1'b1;
	incReal[0] = #10000 1'b0;
	incReal[0] = #10000 1'b1;
	incReal[0] = #10000 1'b0;
	incReal[0] = #10000 1'b1;
	incReal[0] = #10000 1'b0;
end 
// incImag[ 7 ]
initial
begin
	incImag[7] = 1'b0;
end 
// incImag[ 6 ]
initial
begin
	incImag[6] = 1'b0;
end 
// incImag[ 5 ]
initial
begin
	incImag[5] = 1'b0;
end 
// incImag[ 4 ]
initial
begin
	incImag[4] = 1'b0;
end 
// incImag[ 3 ]
initial
begin
	incImag[3] = 1'b0;
end 
// incImag[ 2 ]
initial
begin
	incImag[2] = 1'b0;
end 
// incImag[ 1 ]
initial
begin
	incImag[1] = 1'b0;
	incImag[1] = #110000 1'b1;
	incImag[1] = #10000 1'b0;
end 
// incImag[ 0 ]
initial
begin
	incImag[0] = 1'b0;
	incImag[0] = #90000 1'b1;
	incImag[0] = #10000 1'b0;
	incImag[0] = #30000 1'b1;
	incImag[0] = #10000 1'b0;
	incImag[0] = #10000 1'b1;
	incImag[0] = #10000 1'b0;
end 
// indReal[ 7 ]
initial
begin
	indReal[7] = 1'b0;
end 
// indReal[ 6 ]
initial
begin
	indReal[6] = 1'b0;
end 
// indReal[ 5 ]
initial
begin
	indReal[5] = 1'b0;
end 
// indReal[ 4 ]
initial
begin
	indReal[4] = 1'b0;
end 
// indReal[ 3 ]
initial
begin
	indReal[3] = 1'b0;
end 
// indReal[ 2 ]
initial
begin
	indReal[2] = 1'b0;
end 
// indReal[ 1 ]
initial
begin
	indReal[1] = 1'b0;
	indReal[1] = #110000 1'b1;
	indReal[1] = #10000 1'b0;
	indReal[1] = #10000 1'b1;
	indReal[1] = #10000 1'b0;
	indReal[1] = #10000 1'b1;
	indReal[1] = #10000 1'b0;
end 
// indReal[ 0 ]
initial
begin
	indReal[0] = 1'b0;
	indReal[0] = #90000 1'b1;
	indReal[0] = #10000 1'b0;
	indReal[0] = #10000 1'b1;
	indReal[0] = #10000 1'b0;
end 
// indImag[ 7 ]
initial
begin
	indImag[7] = 1'b0;
end 
// indImag[ 6 ]
initial
begin
	indImag[6] = 1'b0;
end 
// indImag[ 5 ]
initial
begin
	indImag[5] = 1'b0;
end 
// indImag[ 4 ]
initial
begin
	indImag[4] = 1'b0;
end 
// indImag[ 3 ]
initial
begin
	indImag[3] = 1'b0;
end 
// indImag[ 2 ]
initial
begin
	indImag[2] = 1'b0;
end 
// indImag[ 1 ]
initial
begin
	indImag[1] = 1'b0;
	indImag[1] = #130000 1'b1;
	indImag[1] = #10000 1'b0;
end 
// indImag[ 0 ]
initial
begin
	indImag[0] = 1'b0;
	indImag[0] = #90000 1'b1;
	indImag[0] = #10000 1'b0;
	indImag[0] = #10000 1'b1;
	indImag[0] = #10000 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

