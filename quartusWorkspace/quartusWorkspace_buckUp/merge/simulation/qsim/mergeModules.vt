// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/04/2021 12:17:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    merge8to16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module merge8to16_vlg_sample_tst(
	a,
	b,
	sampler_tx
);
input [23:0] a;
input [23:0] b;
output sampler_tx;

reg sample;
time current_time;
always @(a or b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module merge8to16_vlg_check_tst (
	c,
	sampler_rx
);
input [47:0] c;
input sampler_rx;

reg [47:0] c_expected;

reg [47:0] c_prev;

reg [47:0] c_expected_prev;

reg [47:0] last_c_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	c_prev = c;
end

// update expected /o prevs

always @(trigger)
begin
	c_expected_prev = c_expected;
end



// expected c[47]
initial
begin
	c_expected[47] = 1'bX;
end 

// expected c[46]
initial
begin
	c_expected[46] = 1'bX;
end 

// expected c[45]
initial
begin
	c_expected[45] = 1'bX;
end 

// expected c[44]
initial
begin
	c_expected[44] = 1'bX;
end 

// expected c[43]
initial
begin
	c_expected[43] = 1'bX;
end 

// expected c[42]
initial
begin
	c_expected[42] = 1'bX;
end 

// expected c[41]
initial
begin
	c_expected[41] = 1'bX;
end 

// expected c[40]
initial
begin
	c_expected[40] = 1'bX;
end 

// expected c[39]
initial
begin
	c_expected[39] = 1'bX;
end 

// expected c[38]
initial
begin
	c_expected[38] = 1'bX;
end 

// expected c[37]
initial
begin
	c_expected[37] = 1'bX;
end 

// expected c[36]
initial
begin
	c_expected[36] = 1'bX;
end 

// expected c[35]
initial
begin
	c_expected[35] = 1'bX;
end 

// expected c[34]
initial
begin
	c_expected[34] = 1'bX;
end 

// expected c[33]
initial
begin
	c_expected[33] = 1'bX;
end 

// expected c[32]
initial
begin
	c_expected[32] = 1'bX;
end 

// expected c[31]
initial
begin
	c_expected[31] = 1'bX;
end 

// expected c[30]
initial
begin
	c_expected[30] = 1'bX;
end 

// expected c[29]
initial
begin
	c_expected[29] = 1'bX;
end 

// expected c[28]
initial
begin
	c_expected[28] = 1'bX;
end 

// expected c[27]
initial
begin
	c_expected[27] = 1'bX;
end 

// expected c[26]
initial
begin
	c_expected[26] = 1'bX;
end 

// expected c[25]
initial
begin
	c_expected[25] = 1'bX;
end 

// expected c[24]
initial
begin
	c_expected[24] = 1'bX;
end 

// expected c[23]
initial
begin
	c_expected[23] = 1'bX;
end 

// expected c[22]
initial
begin
	c_expected[22] = 1'bX;
end 

// expected c[21]
initial
begin
	c_expected[21] = 1'bX;
end 

// expected c[20]
initial
begin
	c_expected[20] = 1'bX;
end 

// expected c[19]
initial
begin
	c_expected[19] = 1'bX;
end 

// expected c[18]
initial
begin
	c_expected[18] = 1'bX;
end 

// expected c[17]
initial
begin
	c_expected[17] = 1'bX;
end 

// expected c[16]
initial
begin
	c_expected[16] = 1'bX;
end 

// expected c[15]
initial
begin
	c_expected[15] = 1'bX;
end 

// expected c[14]
initial
begin
	c_expected[14] = 1'bX;
end 

// expected c[13]
initial
begin
	c_expected[13] = 1'bX;
end 

// expected c[12]
initial
begin
	c_expected[12] = 1'bX;
end 

// expected c[11]
initial
begin
	c_expected[11] = 1'bX;
end 

// expected c[10]
initial
begin
	c_expected[10] = 1'bX;
end 

// expected c[9]
initial
begin
	c_expected[9] = 1'bX;
end 

// expected c[8]
initial
begin
	c_expected[8] = 1'bX;
end 

// expected c[7]
initial
begin
	c_expected[7] = 1'bX;
end 

// expected c[6]
initial
begin
	c_expected[6] = 1'bX;
end 

// expected c[5]
initial
begin
	c_expected[5] = 1'bX;
end 

// expected c[4]
initial
begin
	c_expected[4] = 1'bX;
end 

// expected c[3]
initial
begin
	c_expected[3] = 1'bX;
end 

// expected c[2]
initial
begin
	c_expected[2] = 1'bX;
end 

// expected c[1]
initial
begin
	c_expected[1] = 1'bX;
end 

// expected c[0]
initial
begin
	c_expected[0] = 1'bX;
end 
// generate trigger
always @(c_expected or c)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c = %b | ",c_expected_prev);
	$display("| real c = %b | ",c_prev);
`endif
	if (
		( c_expected_prev[0] !== 1'bx ) && ( c_prev[0] !== c_expected_prev[0] )
		&& ((c_expected_prev[0] !== last_c_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[0] = c_expected_prev[0];
	end
	if (
		( c_expected_prev[1] !== 1'bx ) && ( c_prev[1] !== c_expected_prev[1] )
		&& ((c_expected_prev[1] !== last_c_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[1] = c_expected_prev[1];
	end
	if (
		( c_expected_prev[2] !== 1'bx ) && ( c_prev[2] !== c_expected_prev[2] )
		&& ((c_expected_prev[2] !== last_c_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[2] = c_expected_prev[2];
	end
	if (
		( c_expected_prev[3] !== 1'bx ) && ( c_prev[3] !== c_expected_prev[3] )
		&& ((c_expected_prev[3] !== last_c_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[3] = c_expected_prev[3];
	end
	if (
		( c_expected_prev[4] !== 1'bx ) && ( c_prev[4] !== c_expected_prev[4] )
		&& ((c_expected_prev[4] !== last_c_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[4] = c_expected_prev[4];
	end
	if (
		( c_expected_prev[5] !== 1'bx ) && ( c_prev[5] !== c_expected_prev[5] )
		&& ((c_expected_prev[5] !== last_c_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[5] = c_expected_prev[5];
	end
	if (
		( c_expected_prev[6] !== 1'bx ) && ( c_prev[6] !== c_expected_prev[6] )
		&& ((c_expected_prev[6] !== last_c_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[6] = c_expected_prev[6];
	end
	if (
		( c_expected_prev[7] !== 1'bx ) && ( c_prev[7] !== c_expected_prev[7] )
		&& ((c_expected_prev[7] !== last_c_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[7] = c_expected_prev[7];
	end
	if (
		( c_expected_prev[8] !== 1'bx ) && ( c_prev[8] !== c_expected_prev[8] )
		&& ((c_expected_prev[8] !== last_c_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[8] = c_expected_prev[8];
	end
	if (
		( c_expected_prev[9] !== 1'bx ) && ( c_prev[9] !== c_expected_prev[9] )
		&& ((c_expected_prev[9] !== last_c_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[9] = c_expected_prev[9];
	end
	if (
		( c_expected_prev[10] !== 1'bx ) && ( c_prev[10] !== c_expected_prev[10] )
		&& ((c_expected_prev[10] !== last_c_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[10] = c_expected_prev[10];
	end
	if (
		( c_expected_prev[11] !== 1'bx ) && ( c_prev[11] !== c_expected_prev[11] )
		&& ((c_expected_prev[11] !== last_c_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[11] = c_expected_prev[11];
	end
	if (
		( c_expected_prev[12] !== 1'bx ) && ( c_prev[12] !== c_expected_prev[12] )
		&& ((c_expected_prev[12] !== last_c_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[12] = c_expected_prev[12];
	end
	if (
		( c_expected_prev[13] !== 1'bx ) && ( c_prev[13] !== c_expected_prev[13] )
		&& ((c_expected_prev[13] !== last_c_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[13] = c_expected_prev[13];
	end
	if (
		( c_expected_prev[14] !== 1'bx ) && ( c_prev[14] !== c_expected_prev[14] )
		&& ((c_expected_prev[14] !== last_c_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[14] = c_expected_prev[14];
	end
	if (
		( c_expected_prev[15] !== 1'bx ) && ( c_prev[15] !== c_expected_prev[15] )
		&& ((c_expected_prev[15] !== last_c_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[15] = c_expected_prev[15];
	end
	if (
		( c_expected_prev[16] !== 1'bx ) && ( c_prev[16] !== c_expected_prev[16] )
		&& ((c_expected_prev[16] !== last_c_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[16] = c_expected_prev[16];
	end
	if (
		( c_expected_prev[17] !== 1'bx ) && ( c_prev[17] !== c_expected_prev[17] )
		&& ((c_expected_prev[17] !== last_c_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[17] = c_expected_prev[17];
	end
	if (
		( c_expected_prev[18] !== 1'bx ) && ( c_prev[18] !== c_expected_prev[18] )
		&& ((c_expected_prev[18] !== last_c_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[18] = c_expected_prev[18];
	end
	if (
		( c_expected_prev[19] !== 1'bx ) && ( c_prev[19] !== c_expected_prev[19] )
		&& ((c_expected_prev[19] !== last_c_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[19] = c_expected_prev[19];
	end
	if (
		( c_expected_prev[20] !== 1'bx ) && ( c_prev[20] !== c_expected_prev[20] )
		&& ((c_expected_prev[20] !== last_c_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[20] = c_expected_prev[20];
	end
	if (
		( c_expected_prev[21] !== 1'bx ) && ( c_prev[21] !== c_expected_prev[21] )
		&& ((c_expected_prev[21] !== last_c_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[21] = c_expected_prev[21];
	end
	if (
		( c_expected_prev[22] !== 1'bx ) && ( c_prev[22] !== c_expected_prev[22] )
		&& ((c_expected_prev[22] !== last_c_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[22] = c_expected_prev[22];
	end
	if (
		( c_expected_prev[23] !== 1'bx ) && ( c_prev[23] !== c_expected_prev[23] )
		&& ((c_expected_prev[23] !== last_c_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[23] = c_expected_prev[23];
	end
	if (
		( c_expected_prev[24] !== 1'bx ) && ( c_prev[24] !== c_expected_prev[24] )
		&& ((c_expected_prev[24] !== last_c_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[24] = c_expected_prev[24];
	end
	if (
		( c_expected_prev[25] !== 1'bx ) && ( c_prev[25] !== c_expected_prev[25] )
		&& ((c_expected_prev[25] !== last_c_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[25] = c_expected_prev[25];
	end
	if (
		( c_expected_prev[26] !== 1'bx ) && ( c_prev[26] !== c_expected_prev[26] )
		&& ((c_expected_prev[26] !== last_c_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[26] = c_expected_prev[26];
	end
	if (
		( c_expected_prev[27] !== 1'bx ) && ( c_prev[27] !== c_expected_prev[27] )
		&& ((c_expected_prev[27] !== last_c_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[27] = c_expected_prev[27];
	end
	if (
		( c_expected_prev[28] !== 1'bx ) && ( c_prev[28] !== c_expected_prev[28] )
		&& ((c_expected_prev[28] !== last_c_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[28] = c_expected_prev[28];
	end
	if (
		( c_expected_prev[29] !== 1'bx ) && ( c_prev[29] !== c_expected_prev[29] )
		&& ((c_expected_prev[29] !== last_c_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[29] = c_expected_prev[29];
	end
	if (
		( c_expected_prev[30] !== 1'bx ) && ( c_prev[30] !== c_expected_prev[30] )
		&& ((c_expected_prev[30] !== last_c_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[30] = c_expected_prev[30];
	end
	if (
		( c_expected_prev[31] !== 1'bx ) && ( c_prev[31] !== c_expected_prev[31] )
		&& ((c_expected_prev[31] !== last_c_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[31] = c_expected_prev[31];
	end
	if (
		( c_expected_prev[32] !== 1'bx ) && ( c_prev[32] !== c_expected_prev[32] )
		&& ((c_expected_prev[32] !== last_c_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[32] = c_expected_prev[32];
	end
	if (
		( c_expected_prev[33] !== 1'bx ) && ( c_prev[33] !== c_expected_prev[33] )
		&& ((c_expected_prev[33] !== last_c_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[33] = c_expected_prev[33];
	end
	if (
		( c_expected_prev[34] !== 1'bx ) && ( c_prev[34] !== c_expected_prev[34] )
		&& ((c_expected_prev[34] !== last_c_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[34] = c_expected_prev[34];
	end
	if (
		( c_expected_prev[35] !== 1'bx ) && ( c_prev[35] !== c_expected_prev[35] )
		&& ((c_expected_prev[35] !== last_c_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[35] = c_expected_prev[35];
	end
	if (
		( c_expected_prev[36] !== 1'bx ) && ( c_prev[36] !== c_expected_prev[36] )
		&& ((c_expected_prev[36] !== last_c_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[36] = c_expected_prev[36];
	end
	if (
		( c_expected_prev[37] !== 1'bx ) && ( c_prev[37] !== c_expected_prev[37] )
		&& ((c_expected_prev[37] !== last_c_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[37] = c_expected_prev[37];
	end
	if (
		( c_expected_prev[38] !== 1'bx ) && ( c_prev[38] !== c_expected_prev[38] )
		&& ((c_expected_prev[38] !== last_c_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[38] = c_expected_prev[38];
	end
	if (
		( c_expected_prev[39] !== 1'bx ) && ( c_prev[39] !== c_expected_prev[39] )
		&& ((c_expected_prev[39] !== last_c_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[39] = c_expected_prev[39];
	end
	if (
		( c_expected_prev[40] !== 1'bx ) && ( c_prev[40] !== c_expected_prev[40] )
		&& ((c_expected_prev[40] !== last_c_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[40] = c_expected_prev[40];
	end
	if (
		( c_expected_prev[41] !== 1'bx ) && ( c_prev[41] !== c_expected_prev[41] )
		&& ((c_expected_prev[41] !== last_c_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[41] = c_expected_prev[41];
	end
	if (
		( c_expected_prev[42] !== 1'bx ) && ( c_prev[42] !== c_expected_prev[42] )
		&& ((c_expected_prev[42] !== last_c_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[42] = c_expected_prev[42];
	end
	if (
		( c_expected_prev[43] !== 1'bx ) && ( c_prev[43] !== c_expected_prev[43] )
		&& ((c_expected_prev[43] !== last_c_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[43] = c_expected_prev[43];
	end
	if (
		( c_expected_prev[44] !== 1'bx ) && ( c_prev[44] !== c_expected_prev[44] )
		&& ((c_expected_prev[44] !== last_c_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[44] = c_expected_prev[44];
	end
	if (
		( c_expected_prev[45] !== 1'bx ) && ( c_prev[45] !== c_expected_prev[45] )
		&& ((c_expected_prev[45] !== last_c_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[45] = c_expected_prev[45];
	end
	if (
		( c_expected_prev[46] !== 1'bx ) && ( c_prev[46] !== c_expected_prev[46] )
		&& ((c_expected_prev[46] !== last_c_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[46] = c_expected_prev[46];
	end
	if (
		( c_expected_prev[47] !== 1'bx ) && ( c_prev[47] !== c_expected_prev[47] )
		&& ((c_expected_prev[47] !== last_c_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[47] = c_expected_prev[47];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module merge8to16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [23:0] a;
reg [23:0] b;
// wires                                               
wire [47:0] c;

wire sampler;                             

// assign statements (if any)                          
merge8to16 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c)
);

// a[23]
initial
begin
	a[23] = 1'b0;
	a[23] = #20000 1'b1;
	a[23] = #60000 1'b0;
end 

// a[22]
initial
begin
	a[22] = 1'b0;
	a[22] = #20000 1'b1;
	a[22] = #60000 1'b0;
end 

// a[21]
initial
begin
	a[21] = 1'b0;
	a[21] = #20000 1'b1;
	a[21] = #60000 1'b0;
end 

// a[20]
initial
begin
	a[20] = 1'b0;
	a[20] = #20000 1'b1;
	a[20] = #60000 1'b0;
end 

// a[19]
initial
begin
	a[19] = 1'b0;
	a[19] = #20000 1'b1;
	a[19] = #60000 1'b0;
end 

// a[18]
initial
begin
	a[18] = 1'b0;
	a[18] = #20000 1'b1;
	a[18] = #60000 1'b0;
end 

// a[17]
initial
begin
	a[17] = 1'b0;
	a[17] = #20000 1'b1;
	a[17] = #60000 1'b0;
end 

// a[16]
initial
begin
	a[16] = 1'b0;
	a[16] = #20000 1'b1;
	a[16] = #60000 1'b0;
end 

// a[15]
initial
begin
	a[15] = 1'b0;
	a[15] = #20000 1'b1;
	a[15] = #60000 1'b0;
end 

// a[14]
initial
begin
	a[14] = 1'b0;
	a[14] = #20000 1'b1;
	a[14] = #60000 1'b0;
end 

// a[13]
initial
begin
	a[13] = 1'b0;
	a[13] = #20000 1'b1;
	a[13] = #60000 1'b0;
end 

// a[12]
initial
begin
	a[12] = 1'b0;
	a[12] = #20000 1'b1;
	a[12] = #60000 1'b0;
end 

// a[11]
initial
begin
	a[11] = 1'b0;
	a[11] = #20000 1'b1;
	a[11] = #60000 1'b0;
end 

// a[10]
initial
begin
	a[10] = 1'b0;
	a[10] = #20000 1'b1;
	a[10] = #60000 1'b0;
end 

// a[9]
initial
begin
	a[9] = 1'b0;
end 

// a[8]
initial
begin
	a[8] = 1'b0;
	a[8] = #20000 1'b1;
	a[8] = #60000 1'b0;
end 

// a[7]
initial
begin
	a[7] = 1'b0;
end 

// a[6]
initial
begin
	a[6] = 1'b0;
	a[6] = #20000 1'b1;
	a[6] = #60000 1'b0;
end 

// a[5]
initial
begin
	a[5] = 1'b0;
	a[5] = #20000 1'b1;
	a[5] = #60000 1'b0;
end 

// a[4]
initial
begin
	a[4] = 1'b0;
end 

// a[3]
initial
begin
	a[3] = 1'b0;
	a[3] = #20000 1'b1;
	a[3] = #60000 1'b0;
end 

// a[2]
initial
begin
	a[2] = 1'b0;
	a[2] = #20000 1'b1;
	a[2] = #60000 1'b0;
end 

// a[1]
initial
begin
	a[1] = 1'b0;
end 

// a[0]
initial
begin
	a[0] = 1'b0;
end 

// b[0]
initial
begin
	b[0] = 1'b0;
end 

// b[1]
initial
begin
	b[1] = 1'b0;
end 

// b[2]
initial
begin
	b[2] = 1'b0;
end 

// b[3]
initial
begin
	b[3] = 1'b0;
end 

// b[4]
initial
begin
	b[4] = 1'b0;
end 

// b[5]
initial
begin
	b[5] = 1'b0;
	b[5] = #20000 1'b1;
	b[5] = #60000 1'b0;
end 

// b[6]
initial
begin
	b[6] = 1'b0;
end 

// b[7]
initial
begin
	b[7] = 1'b0;
	b[7] = #20000 1'b1;
	b[7] = #60000 1'b0;
end 

// b[8]
initial
begin
	b[8] = 1'b0;
end 

// b[9]
initial
begin
	b[9] = 1'b0;
end 

// b[10]
initial
begin
	b[10] = 1'b0;
	b[10] = #20000 1'b1;
	b[10] = #60000 1'b0;
end 

// b[11]
initial
begin
	b[11] = 1'b0;
	b[11] = #20000 1'b1;
	b[11] = #60000 1'b0;
end 

// b[12]
initial
begin
	b[12] = 1'b0;
	b[12] = #20000 1'b1;
	b[12] = #60000 1'b0;
end 

// b[13]
initial
begin
	b[13] = 1'b0;
end 

// b[14]
initial
begin
	b[14] = 1'b0;
end 

// b[15]
initial
begin
	b[15] = 1'b0;
	b[15] = #20000 1'b1;
	b[15] = #60000 1'b0;
end 

// b[16]
initial
begin
	b[16] = 1'b0;
end 

// b[17]
initial
begin
	b[17] = 1'b0;
	b[17] = #20000 1'b1;
	b[17] = #60000 1'b0;
end 

// b[18]
initial
begin
	b[18] = 1'b0;
	b[18] = #20000 1'b1;
	b[18] = #60000 1'b0;
end 

// b[19]
initial
begin
	b[19] = 1'b0;
	b[19] = #20000 1'b1;
	b[19] = #60000 1'b0;
end 

// b[20]
initial
begin
	b[20] = 1'b0;
end 

// b[21]
initial
begin
	b[21] = 1'b0;
	b[21] = #20000 1'b1;
	b[21] = #60000 1'b0;
end 

// b[22]
initial
begin
	b[22] = 1'b0;
	b[22] = #20000 1'b1;
	b[22] = #60000 1'b0;
end 

// b[23]
initial
begin
	b[23] = 1'b0;
	b[23] = #20000 1'b1;
	b[23] = #60000 1'b0;
end 

merge8to16_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sampler_tx(sampler)
);

merge8to16_vlg_check_tst tb_out(
	.c(c),
	.sampler_rx(sampler)
);
endmodule

