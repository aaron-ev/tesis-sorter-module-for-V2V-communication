// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/03/2021 01:08:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sortingNetwork4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sortingNetwork4_vlg_sample_tst(
	a0,
	a1,
	a2,
	a3,
	sampler_tx
);
input [15:0] a0;
input [15:0] a1;
input [15:0] a2;
input [15:0] a3;
output sampler_tx;

reg sample;
time current_time;
always @(a0 or a1 or a2 or a3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sortingNetwork4_vlg_check_tst (
	y0,
	y1,
	y2,
	y3,
	sampler_rx
);
input [15:0] y0;
input [15:0] y1;
input [15:0] y2;
input [15:0] y3;
input sampler_rx;

reg [15:0] y0_expected;
reg [15:0] y1_expected;
reg [15:0] y2_expected;
reg [15:0] y3_expected;

reg [15:0] y0_prev;
reg [15:0] y1_prev;
reg [15:0] y2_prev;
reg [15:0] y3_prev;

reg [15:0] y0_expected_prev;
reg [15:0] y1_expected_prev;
reg [15:0] y2_expected_prev;
reg [15:0] y3_expected_prev;

reg [15:0] last_y0_exp;
reg [15:0] last_y1_exp;
reg [15:0] last_y2_exp;
reg [15:0] last_y3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	y0_prev = y0;
	y1_prev = y1;
	y2_prev = y2;
	y3_prev = y3;
end

// update expected /o prevs

always @(trigger)
begin
	y0_expected_prev = y0_expected;
	y1_expected_prev = y1_expected;
	y2_expected_prev = y2_expected;
	y3_expected_prev = y3_expected;
end


// expected y0[ 15 ]
initial
begin
	y0_expected[15] = 1'bX;
end 
// expected y0[ 14 ]
initial
begin
	y0_expected[14] = 1'bX;
end 
// expected y0[ 13 ]
initial
begin
	y0_expected[13] = 1'bX;
end 
// expected y0[ 12 ]
initial
begin
	y0_expected[12] = 1'bX;
end 
// expected y0[ 11 ]
initial
begin
	y0_expected[11] = 1'bX;
end 
// expected y0[ 10 ]
initial
begin
	y0_expected[10] = 1'bX;
end 
// expected y0[ 9 ]
initial
begin
	y0_expected[9] = 1'bX;
end 
// expected y0[ 8 ]
initial
begin
	y0_expected[8] = 1'bX;
end 
// expected y0[ 7 ]
initial
begin
	y0_expected[7] = 1'bX;
end 
// expected y0[ 6 ]
initial
begin
	y0_expected[6] = 1'bX;
end 
// expected y0[ 5 ]
initial
begin
	y0_expected[5] = 1'bX;
end 
// expected y0[ 4 ]
initial
begin
	y0_expected[4] = 1'bX;
end 
// expected y0[ 3 ]
initial
begin
	y0_expected[3] = 1'bX;
end 
// expected y0[ 2 ]
initial
begin
	y0_expected[2] = 1'bX;
end 
// expected y0[ 1 ]
initial
begin
	y0_expected[1] = 1'bX;
end 
// expected y0[ 0 ]
initial
begin
	y0_expected[0] = 1'bX;
end 
// expected y1[ 15 ]
initial
begin
	y1_expected[15] = 1'bX;
end 
// expected y1[ 14 ]
initial
begin
	y1_expected[14] = 1'bX;
end 
// expected y1[ 13 ]
initial
begin
	y1_expected[13] = 1'bX;
end 
// expected y1[ 12 ]
initial
begin
	y1_expected[12] = 1'bX;
end 
// expected y1[ 11 ]
initial
begin
	y1_expected[11] = 1'bX;
end 
// expected y1[ 10 ]
initial
begin
	y1_expected[10] = 1'bX;
end 
// expected y1[ 9 ]
initial
begin
	y1_expected[9] = 1'bX;
end 
// expected y1[ 8 ]
initial
begin
	y1_expected[8] = 1'bX;
end 
// expected y1[ 7 ]
initial
begin
	y1_expected[7] = 1'bX;
end 
// expected y1[ 6 ]
initial
begin
	y1_expected[6] = 1'bX;
end 
// expected y1[ 5 ]
initial
begin
	y1_expected[5] = 1'bX;
end 
// expected y1[ 4 ]
initial
begin
	y1_expected[4] = 1'bX;
end 
// expected y1[ 3 ]
initial
begin
	y1_expected[3] = 1'bX;
end 
// expected y1[ 2 ]
initial
begin
	y1_expected[2] = 1'bX;
end 
// expected y1[ 1 ]
initial
begin
	y1_expected[1] = 1'bX;
end 
// expected y1[ 0 ]
initial
begin
	y1_expected[0] = 1'bX;
end 
// expected y2[ 15 ]
initial
begin
	y2_expected[15] = 1'bX;
end 
// expected y2[ 14 ]
initial
begin
	y2_expected[14] = 1'bX;
end 
// expected y2[ 13 ]
initial
begin
	y2_expected[13] = 1'bX;
end 
// expected y2[ 12 ]
initial
begin
	y2_expected[12] = 1'bX;
end 
// expected y2[ 11 ]
initial
begin
	y2_expected[11] = 1'bX;
end 
// expected y2[ 10 ]
initial
begin
	y2_expected[10] = 1'bX;
end 
// expected y2[ 9 ]
initial
begin
	y2_expected[9] = 1'bX;
end 
// expected y2[ 8 ]
initial
begin
	y2_expected[8] = 1'bX;
end 
// expected y2[ 7 ]
initial
begin
	y2_expected[7] = 1'bX;
end 
// expected y2[ 6 ]
initial
begin
	y2_expected[6] = 1'bX;
end 
// expected y2[ 5 ]
initial
begin
	y2_expected[5] = 1'bX;
end 
// expected y2[ 4 ]
initial
begin
	y2_expected[4] = 1'bX;
end 
// expected y2[ 3 ]
initial
begin
	y2_expected[3] = 1'bX;
end 
// expected y2[ 2 ]
initial
begin
	y2_expected[2] = 1'bX;
end 
// expected y2[ 1 ]
initial
begin
	y2_expected[1] = 1'bX;
end 
// expected y2[ 0 ]
initial
begin
	y2_expected[0] = 1'bX;
end 
// expected y3[ 15 ]
initial
begin
	y3_expected[15] = 1'bX;
end 
// expected y3[ 14 ]
initial
begin
	y3_expected[14] = 1'bX;
end 
// expected y3[ 13 ]
initial
begin
	y3_expected[13] = 1'bX;
end 
// expected y3[ 12 ]
initial
begin
	y3_expected[12] = 1'bX;
end 
// expected y3[ 11 ]
initial
begin
	y3_expected[11] = 1'bX;
end 
// expected y3[ 10 ]
initial
begin
	y3_expected[10] = 1'bX;
end 
// expected y3[ 9 ]
initial
begin
	y3_expected[9] = 1'bX;
end 
// expected y3[ 8 ]
initial
begin
	y3_expected[8] = 1'bX;
end 
// expected y3[ 7 ]
initial
begin
	y3_expected[7] = 1'bX;
end 
// expected y3[ 6 ]
initial
begin
	y3_expected[6] = 1'bX;
end 
// expected y3[ 5 ]
initial
begin
	y3_expected[5] = 1'bX;
end 
// expected y3[ 4 ]
initial
begin
	y3_expected[4] = 1'bX;
end 
// expected y3[ 3 ]
initial
begin
	y3_expected[3] = 1'bX;
end 
// expected y3[ 2 ]
initial
begin
	y3_expected[2] = 1'bX;
end 
// expected y3[ 1 ]
initial
begin
	y3_expected[1] = 1'bX;
end 
// expected y3[ 0 ]
initial
begin
	y3_expected[0] = 1'bX;
end 
// generate trigger
always @(y0_expected or y0 or y1_expected or y1 or y2_expected or y2 or y3_expected or y3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected y0 = %b | expected y1 = %b | expected y2 = %b | expected y3 = %b | ",y0_expected_prev,y1_expected_prev,y2_expected_prev,y3_expected_prev);
	$display("| real y0 = %b | real y1 = %b | real y2 = %b | real y3 = %b | ",y0_prev,y1_prev,y2_prev,y3_prev);
`endif
	if (
		( y0_expected_prev[0] !== 1'bx ) && ( y0_prev[0] !== y0_expected_prev[0] )
		&& ((y0_expected_prev[0] !== last_y0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[0] = y0_expected_prev[0];
	end
	if (
		( y0_expected_prev[1] !== 1'bx ) && ( y0_prev[1] !== y0_expected_prev[1] )
		&& ((y0_expected_prev[1] !== last_y0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[1] = y0_expected_prev[1];
	end
	if (
		( y0_expected_prev[2] !== 1'bx ) && ( y0_prev[2] !== y0_expected_prev[2] )
		&& ((y0_expected_prev[2] !== last_y0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[2] = y0_expected_prev[2];
	end
	if (
		( y0_expected_prev[3] !== 1'bx ) && ( y0_prev[3] !== y0_expected_prev[3] )
		&& ((y0_expected_prev[3] !== last_y0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[3] = y0_expected_prev[3];
	end
	if (
		( y0_expected_prev[4] !== 1'bx ) && ( y0_prev[4] !== y0_expected_prev[4] )
		&& ((y0_expected_prev[4] !== last_y0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[4] = y0_expected_prev[4];
	end
	if (
		( y0_expected_prev[5] !== 1'bx ) && ( y0_prev[5] !== y0_expected_prev[5] )
		&& ((y0_expected_prev[5] !== last_y0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[5] = y0_expected_prev[5];
	end
	if (
		( y0_expected_prev[6] !== 1'bx ) && ( y0_prev[6] !== y0_expected_prev[6] )
		&& ((y0_expected_prev[6] !== last_y0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[6] = y0_expected_prev[6];
	end
	if (
		( y0_expected_prev[7] !== 1'bx ) && ( y0_prev[7] !== y0_expected_prev[7] )
		&& ((y0_expected_prev[7] !== last_y0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[7] = y0_expected_prev[7];
	end
	if (
		( y0_expected_prev[8] !== 1'bx ) && ( y0_prev[8] !== y0_expected_prev[8] )
		&& ((y0_expected_prev[8] !== last_y0_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[8] = y0_expected_prev[8];
	end
	if (
		( y0_expected_prev[9] !== 1'bx ) && ( y0_prev[9] !== y0_expected_prev[9] )
		&& ((y0_expected_prev[9] !== last_y0_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[9] = y0_expected_prev[9];
	end
	if (
		( y0_expected_prev[10] !== 1'bx ) && ( y0_prev[10] !== y0_expected_prev[10] )
		&& ((y0_expected_prev[10] !== last_y0_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[10] = y0_expected_prev[10];
	end
	if (
		( y0_expected_prev[11] !== 1'bx ) && ( y0_prev[11] !== y0_expected_prev[11] )
		&& ((y0_expected_prev[11] !== last_y0_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[11] = y0_expected_prev[11];
	end
	if (
		( y0_expected_prev[12] !== 1'bx ) && ( y0_prev[12] !== y0_expected_prev[12] )
		&& ((y0_expected_prev[12] !== last_y0_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[12] = y0_expected_prev[12];
	end
	if (
		( y0_expected_prev[13] !== 1'bx ) && ( y0_prev[13] !== y0_expected_prev[13] )
		&& ((y0_expected_prev[13] !== last_y0_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[13] = y0_expected_prev[13];
	end
	if (
		( y0_expected_prev[14] !== 1'bx ) && ( y0_prev[14] !== y0_expected_prev[14] )
		&& ((y0_expected_prev[14] !== last_y0_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[14] = y0_expected_prev[14];
	end
	if (
		( y0_expected_prev[15] !== 1'bx ) && ( y0_prev[15] !== y0_expected_prev[15] )
		&& ((y0_expected_prev[15] !== last_y0_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[15] = y0_expected_prev[15];
	end
	if (
		( y1_expected_prev[0] !== 1'bx ) && ( y1_prev[0] !== y1_expected_prev[0] )
		&& ((y1_expected_prev[0] !== last_y1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[0] = y1_expected_prev[0];
	end
	if (
		( y1_expected_prev[1] !== 1'bx ) && ( y1_prev[1] !== y1_expected_prev[1] )
		&& ((y1_expected_prev[1] !== last_y1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[1] = y1_expected_prev[1];
	end
	if (
		( y1_expected_prev[2] !== 1'bx ) && ( y1_prev[2] !== y1_expected_prev[2] )
		&& ((y1_expected_prev[2] !== last_y1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[2] = y1_expected_prev[2];
	end
	if (
		( y1_expected_prev[3] !== 1'bx ) && ( y1_prev[3] !== y1_expected_prev[3] )
		&& ((y1_expected_prev[3] !== last_y1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[3] = y1_expected_prev[3];
	end
	if (
		( y1_expected_prev[4] !== 1'bx ) && ( y1_prev[4] !== y1_expected_prev[4] )
		&& ((y1_expected_prev[4] !== last_y1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[4] = y1_expected_prev[4];
	end
	if (
		( y1_expected_prev[5] !== 1'bx ) && ( y1_prev[5] !== y1_expected_prev[5] )
		&& ((y1_expected_prev[5] !== last_y1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[5] = y1_expected_prev[5];
	end
	if (
		( y1_expected_prev[6] !== 1'bx ) && ( y1_prev[6] !== y1_expected_prev[6] )
		&& ((y1_expected_prev[6] !== last_y1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[6] = y1_expected_prev[6];
	end
	if (
		( y1_expected_prev[7] !== 1'bx ) && ( y1_prev[7] !== y1_expected_prev[7] )
		&& ((y1_expected_prev[7] !== last_y1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[7] = y1_expected_prev[7];
	end
	if (
		( y1_expected_prev[8] !== 1'bx ) && ( y1_prev[8] !== y1_expected_prev[8] )
		&& ((y1_expected_prev[8] !== last_y1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[8] = y1_expected_prev[8];
	end
	if (
		( y1_expected_prev[9] !== 1'bx ) && ( y1_prev[9] !== y1_expected_prev[9] )
		&& ((y1_expected_prev[9] !== last_y1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[9] = y1_expected_prev[9];
	end
	if (
		( y1_expected_prev[10] !== 1'bx ) && ( y1_prev[10] !== y1_expected_prev[10] )
		&& ((y1_expected_prev[10] !== last_y1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[10] = y1_expected_prev[10];
	end
	if (
		( y1_expected_prev[11] !== 1'bx ) && ( y1_prev[11] !== y1_expected_prev[11] )
		&& ((y1_expected_prev[11] !== last_y1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[11] = y1_expected_prev[11];
	end
	if (
		( y1_expected_prev[12] !== 1'bx ) && ( y1_prev[12] !== y1_expected_prev[12] )
		&& ((y1_expected_prev[12] !== last_y1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[12] = y1_expected_prev[12];
	end
	if (
		( y1_expected_prev[13] !== 1'bx ) && ( y1_prev[13] !== y1_expected_prev[13] )
		&& ((y1_expected_prev[13] !== last_y1_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[13] = y1_expected_prev[13];
	end
	if (
		( y1_expected_prev[14] !== 1'bx ) && ( y1_prev[14] !== y1_expected_prev[14] )
		&& ((y1_expected_prev[14] !== last_y1_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[14] = y1_expected_prev[14];
	end
	if (
		( y1_expected_prev[15] !== 1'bx ) && ( y1_prev[15] !== y1_expected_prev[15] )
		&& ((y1_expected_prev[15] !== last_y1_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[15] = y1_expected_prev[15];
	end
	if (
		( y2_expected_prev[0] !== 1'bx ) && ( y2_prev[0] !== y2_expected_prev[0] )
		&& ((y2_expected_prev[0] !== last_y2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[0] = y2_expected_prev[0];
	end
	if (
		( y2_expected_prev[1] !== 1'bx ) && ( y2_prev[1] !== y2_expected_prev[1] )
		&& ((y2_expected_prev[1] !== last_y2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[1] = y2_expected_prev[1];
	end
	if (
		( y2_expected_prev[2] !== 1'bx ) && ( y2_prev[2] !== y2_expected_prev[2] )
		&& ((y2_expected_prev[2] !== last_y2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[2] = y2_expected_prev[2];
	end
	if (
		( y2_expected_prev[3] !== 1'bx ) && ( y2_prev[3] !== y2_expected_prev[3] )
		&& ((y2_expected_prev[3] !== last_y2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[3] = y2_expected_prev[3];
	end
	if (
		( y2_expected_prev[4] !== 1'bx ) && ( y2_prev[4] !== y2_expected_prev[4] )
		&& ((y2_expected_prev[4] !== last_y2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[4] = y2_expected_prev[4];
	end
	if (
		( y2_expected_prev[5] !== 1'bx ) && ( y2_prev[5] !== y2_expected_prev[5] )
		&& ((y2_expected_prev[5] !== last_y2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[5] = y2_expected_prev[5];
	end
	if (
		( y2_expected_prev[6] !== 1'bx ) && ( y2_prev[6] !== y2_expected_prev[6] )
		&& ((y2_expected_prev[6] !== last_y2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[6] = y2_expected_prev[6];
	end
	if (
		( y2_expected_prev[7] !== 1'bx ) && ( y2_prev[7] !== y2_expected_prev[7] )
		&& ((y2_expected_prev[7] !== last_y2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[7] = y2_expected_prev[7];
	end
	if (
		( y2_expected_prev[8] !== 1'bx ) && ( y2_prev[8] !== y2_expected_prev[8] )
		&& ((y2_expected_prev[8] !== last_y2_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[8] = y2_expected_prev[8];
	end
	if (
		( y2_expected_prev[9] !== 1'bx ) && ( y2_prev[9] !== y2_expected_prev[9] )
		&& ((y2_expected_prev[9] !== last_y2_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[9] = y2_expected_prev[9];
	end
	if (
		( y2_expected_prev[10] !== 1'bx ) && ( y2_prev[10] !== y2_expected_prev[10] )
		&& ((y2_expected_prev[10] !== last_y2_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[10] = y2_expected_prev[10];
	end
	if (
		( y2_expected_prev[11] !== 1'bx ) && ( y2_prev[11] !== y2_expected_prev[11] )
		&& ((y2_expected_prev[11] !== last_y2_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[11] = y2_expected_prev[11];
	end
	if (
		( y2_expected_prev[12] !== 1'bx ) && ( y2_prev[12] !== y2_expected_prev[12] )
		&& ((y2_expected_prev[12] !== last_y2_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[12] = y2_expected_prev[12];
	end
	if (
		( y2_expected_prev[13] !== 1'bx ) && ( y2_prev[13] !== y2_expected_prev[13] )
		&& ((y2_expected_prev[13] !== last_y2_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[13] = y2_expected_prev[13];
	end
	if (
		( y2_expected_prev[14] !== 1'bx ) && ( y2_prev[14] !== y2_expected_prev[14] )
		&& ((y2_expected_prev[14] !== last_y2_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[14] = y2_expected_prev[14];
	end
	if (
		( y2_expected_prev[15] !== 1'bx ) && ( y2_prev[15] !== y2_expected_prev[15] )
		&& ((y2_expected_prev[15] !== last_y2_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[15] = y2_expected_prev[15];
	end
	if (
		( y3_expected_prev[0] !== 1'bx ) && ( y3_prev[0] !== y3_expected_prev[0] )
		&& ((y3_expected_prev[0] !== last_y3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[0] = y3_expected_prev[0];
	end
	if (
		( y3_expected_prev[1] !== 1'bx ) && ( y3_prev[1] !== y3_expected_prev[1] )
		&& ((y3_expected_prev[1] !== last_y3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[1] = y3_expected_prev[1];
	end
	if (
		( y3_expected_prev[2] !== 1'bx ) && ( y3_prev[2] !== y3_expected_prev[2] )
		&& ((y3_expected_prev[2] !== last_y3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[2] = y3_expected_prev[2];
	end
	if (
		( y3_expected_prev[3] !== 1'bx ) && ( y3_prev[3] !== y3_expected_prev[3] )
		&& ((y3_expected_prev[3] !== last_y3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[3] = y3_expected_prev[3];
	end
	if (
		( y3_expected_prev[4] !== 1'bx ) && ( y3_prev[4] !== y3_expected_prev[4] )
		&& ((y3_expected_prev[4] !== last_y3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[4] = y3_expected_prev[4];
	end
	if (
		( y3_expected_prev[5] !== 1'bx ) && ( y3_prev[5] !== y3_expected_prev[5] )
		&& ((y3_expected_prev[5] !== last_y3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[5] = y3_expected_prev[5];
	end
	if (
		( y3_expected_prev[6] !== 1'bx ) && ( y3_prev[6] !== y3_expected_prev[6] )
		&& ((y3_expected_prev[6] !== last_y3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[6] = y3_expected_prev[6];
	end
	if (
		( y3_expected_prev[7] !== 1'bx ) && ( y3_prev[7] !== y3_expected_prev[7] )
		&& ((y3_expected_prev[7] !== last_y3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[7] = y3_expected_prev[7];
	end
	if (
		( y3_expected_prev[8] !== 1'bx ) && ( y3_prev[8] !== y3_expected_prev[8] )
		&& ((y3_expected_prev[8] !== last_y3_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[8] = y3_expected_prev[8];
	end
	if (
		( y3_expected_prev[9] !== 1'bx ) && ( y3_prev[9] !== y3_expected_prev[9] )
		&& ((y3_expected_prev[9] !== last_y3_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[9] = y3_expected_prev[9];
	end
	if (
		( y3_expected_prev[10] !== 1'bx ) && ( y3_prev[10] !== y3_expected_prev[10] )
		&& ((y3_expected_prev[10] !== last_y3_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[10] = y3_expected_prev[10];
	end
	if (
		( y3_expected_prev[11] !== 1'bx ) && ( y3_prev[11] !== y3_expected_prev[11] )
		&& ((y3_expected_prev[11] !== last_y3_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[11] = y3_expected_prev[11];
	end
	if (
		( y3_expected_prev[12] !== 1'bx ) && ( y3_prev[12] !== y3_expected_prev[12] )
		&& ((y3_expected_prev[12] !== last_y3_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[12] = y3_expected_prev[12];
	end
	if (
		( y3_expected_prev[13] !== 1'bx ) && ( y3_prev[13] !== y3_expected_prev[13] )
		&& ((y3_expected_prev[13] !== last_y3_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[13] = y3_expected_prev[13];
	end
	if (
		( y3_expected_prev[14] !== 1'bx ) && ( y3_prev[14] !== y3_expected_prev[14] )
		&& ((y3_expected_prev[14] !== last_y3_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[14] = y3_expected_prev[14];
	end
	if (
		( y3_expected_prev[15] !== 1'bx ) && ( y3_prev[15] !== y3_expected_prev[15] )
		&& ((y3_expected_prev[15] !== last_y3_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[15] = y3_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sortingNetwork4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] a0;
reg [15:0] a1;
reg [15:0] a2;
reg [15:0] a3;
// wires                                               
wire [15:0] y0;
wire [15:0] y1;
wire [15:0] y2;
wire [15:0] y3;

wire sampler;                             

// assign statements (if any)                          
sortingNetwork4 i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.y0(y0),
	.y1(y1),
	.y2(y2),
	.y3(y3)
);
// a0[ 15 ]
initial
begin
	a0[15] = 1'b0;
end 
// a0[ 14 ]
initial
begin
	a0[14] = 1'b0;
end 
// a0[ 13 ]
initial
begin
	a0[13] = 1'b0;
end 
// a0[ 12 ]
initial
begin
	a0[12] = 1'b0;
end 
// a0[ 11 ]
initial
begin
	a0[11] = 1'b0;
end 
// a0[ 10 ]
initial
begin
	a0[10] = 1'b0;
end 
// a0[ 9 ]
initial
begin
	a0[9] = 1'b0;
end 
// a0[ 8 ]
initial
begin
	a0[8] = 1'b0;
end 
// a0[ 7 ]
initial
begin
	a0[7] = 1'b0;
end 
// a0[ 6 ]
initial
begin
	a0[6] = 1'b0;
end 
// a0[ 5 ]
initial
begin
	a0[5] = 1'b0;
end 
// a0[ 4 ]
initial
begin
	a0[4] = 1'b0;
end 
// a0[ 3 ]
initial
begin
	a0[3] = 1'b0;
end 
// a0[ 2 ]
initial
begin
	a0[2] = 1'b0;
end 
// a0[ 1 ]
initial
begin
	a0[1] = 1'b0;
	a0[1] = #90000 1'b1;
	a0[1] = #40000 1'b0;
end 
// a0[ 0 ]
initial
begin
	a0[0] = 1'b0;
	a0[0] = #90000 1'b1;
	a0[0] = #40000 1'b0;
end 
// a1[ 15 ]
initial
begin
	a1[15] = 1'b0;
end 
// a1[ 14 ]
initial
begin
	a1[14] = 1'b0;
end 
// a1[ 13 ]
initial
begin
	a1[13] = 1'b0;
end 
// a1[ 12 ]
initial
begin
	a1[12] = 1'b0;
end 
// a1[ 11 ]
initial
begin
	a1[11] = 1'b0;
end 
// a1[ 10 ]
initial
begin
	a1[10] = 1'b0;
end 
// a1[ 9 ]
initial
begin
	a1[9] = 1'b0;
end 
// a1[ 8 ]
initial
begin
	a1[8] = 1'b0;
end 
// a1[ 7 ]
initial
begin
	a1[7] = 1'b0;
end 
// a1[ 6 ]
initial
begin
	a1[6] = 1'b0;
end 
// a1[ 5 ]
initial
begin
	a1[5] = 1'b0;
end 
// a1[ 4 ]
initial
begin
	a1[4] = 1'b0;
end 
// a1[ 3 ]
initial
begin
	a1[3] = 1'b0;
end 
// a1[ 2 ]
initial
begin
	a1[2] = 1'b0;
end 
// a1[ 1 ]
initial
begin
	a1[1] = 1'b0;
	a1[1] = #80000 1'b1;
	a1[1] = #50000 1'b0;
end 
// a1[ 0 ]
initial
begin
	a1[0] = 1'b0;
end 
// a2[ 15 ]
initial
begin
	a2[15] = 1'b0;
end 
// a2[ 14 ]
initial
begin
	a2[14] = 1'b0;
end 
// a2[ 13 ]
initial
begin
	a2[13] = 1'b0;
end 
// a2[ 12 ]
initial
begin
	a2[12] = 1'b0;
end 
// a2[ 11 ]
initial
begin
	a2[11] = 1'b0;
end 
// a2[ 10 ]
initial
begin
	a2[10] = 1'b0;
end 
// a2[ 9 ]
initial
begin
	a2[9] = 1'b0;
end 
// a2[ 8 ]
initial
begin
	a2[8] = 1'b0;
end 
// a2[ 7 ]
initial
begin
	a2[7] = 1'b0;
end 
// a2[ 6 ]
initial
begin
	a2[6] = 1'b0;
end 
// a2[ 5 ]
initial
begin
	a2[5] = 1'b0;
end 
// a2[ 4 ]
initial
begin
	a2[4] = 1'b0;
end 
// a2[ 3 ]
initial
begin
	a2[3] = 1'b0;
end 
// a2[ 2 ]
initial
begin
	a2[2] = 1'b0;
end 
// a2[ 1 ]
initial
begin
	a2[1] = 1'b0;
end 
// a2[ 0 ]
initial
begin
	a2[0] = 1'b0;
	a2[0] = #100000 1'b1;
	a2[0] = #70000 1'b0;
end 
// a3[ 15 ]
initial
begin
	a3[15] = 1'b0;
end 
// a3[ 14 ]
initial
begin
	a3[14] = 1'b0;
end 
// a3[ 13 ]
initial
begin
	a3[13] = 1'b0;
end 
// a3[ 12 ]
initial
begin
	a3[12] = 1'b0;
end 
// a3[ 11 ]
initial
begin
	a3[11] = 1'b0;
end 
// a3[ 10 ]
initial
begin
	a3[10] = 1'b0;
end 
// a3[ 9 ]
initial
begin
	a3[9] = 1'b0;
end 
// a3[ 8 ]
initial
begin
	a3[8] = 1'b0;
end 
// a3[ 7 ]
initial
begin
	a3[7] = 1'b0;
end 
// a3[ 6 ]
initial
begin
	a3[6] = 1'b0;
end 
// a3[ 5 ]
initial
begin
	a3[5] = 1'b0;
end 
// a3[ 4 ]
initial
begin
	a3[4] = 1'b0;
end 
// a3[ 3 ]
initial
begin
	a3[3] = 1'b0;
end 
// a3[ 2 ]
initial
begin
	a3[2] = 1'b1;
	a3[2] = #100000 1'b0;
end 
// a3[ 1 ]
initial
begin
	a3[1] = 1'b0;
end 
// a3[ 0 ]
initial
begin
	a3[0] = 1'b1;
	a3[0] = #100000 1'b0;
	a3[0] = #70000 1'b1;
	a3[0] = #80000 1'b0;
end 

sortingNetwork4_vlg_sample_tst tb_sample (
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.sampler_tx(sampler)
);

sortingNetwork4_vlg_check_tst tb_out(
	.y0(y0),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.sampler_rx(sampler)
);
endmodule

